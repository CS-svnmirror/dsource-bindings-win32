/***********************************************************************\
*                                wingdi.d                               *
*                                                                       *
*                       Windows API header module                       *
*                                                                       *
*                 Translated from MinGW Windows headers                 *
*                                                                       *
*                       Placed into public domain                       *
\***********************************************************************/

module win32.wingdi;
private import win32.w32api;
private import win32.winver;
private import win32.windef;

// FIXME: clean up Windows version support

enum {
    BI_RGB=0,
    BI_RLE8,
    BI_RLE4,
    BI_BITFIELDS,
    BI_JPEG,
    BI_PNG
}

enum {
    LF_FACESIZE     = 32,
    LF_FULLFACESIZE = 64
}

enum {
    CA_NEGATIVE   = 1,
    CA_LOG_FILTER = 2
}

enum {
    ILLUMINANT_DEVICE_DEFAULT=0,
    ILLUMINANT_A,
    ILLUMINANT_B,
    ILLUMINANT_C,
    ILLUMINANT_D50,
    ILLUMINANT_D55,
    ILLUMINANT_D65,
    ILLUMINANT_D75,
    ILLUMINANT_F2,
    ILLUMINANT_MAX_INDEX=ILLUMINANT_F2,
    ILLUMINANT_TUNGSTEN=ILLUMINANT_A,
    ILLUMINANT_DAYLIGHT=ILLUMINANT_C,
    ILLUMINANT_FLUORESCENT=ILLUMINANT_F2,
    ILLUMINANT_NTSC=ILLUMINANT_C
}

enum {
    RGB_GAMMA_MIN = 2500,
    RGB_GAMMA_MAX = 65000
}

enum {
    REFERENCE_WHITE_MIN = 6000,
    REFERENCE_WHITE_MAX = 10000,
    REFERENCE_BLACK_MIN = 0,
    REFERENCE_BLACK_MAX = 4000
}

const COLOR_ADJ_MIN = -100;
const COLOR_ADJ_MAX = 100;

const CCHDEVICENAME = 32;
const CCHFORMNAME   = 32;

enum {
    DI_MASK=1,
    DI_APPBANDING=1,
    DI_IMAGE=2,
    DI_NORMAL=3,
    DI_COMPAT=4,
    DI_DEFAULTSIZE=8
}

enum {
    EMR_HEADER=1,
    EMR_POLYBEZIER,
    EMR_POLYGON,
    EMR_POLYLINE,
    EMR_POLYBEZIERTO,
    EMR_POLYLINETO,
    EMR_POLYPOLYLINE,
    EMR_POLYPOLYGON,
    EMR_SETWINDOWEXTEX,
    EMR_SETWINDOWORGEX,
    EMR_SETVIEWPORTEXTEX,
    EMR_SETVIEWPORTORGEX,
    EMR_SETBRUSHORGEX,
    EMR_EOF,
    EMR_SETPIXELV,
    EMR_SETMAPPERFLAGS,
    EMR_SETMAPMODE,
    EMR_SETBKMODE,
    EMR_SETPOLYFILLMODE,
    EMR_SETROP2,
    EMR_SETSTRETCHBLTMODE,
    EMR_SETTEXTALIGN,
    EMR_SETCOLORADJUSTMENT,
    EMR_SETTEXTCOLOR,
    EMR_SETBKCOLOR,
    EMR_OFFSETCLIPRGN,
    EMR_MOVETOEX,
    EMR_SETMETARGN,
    EMR_EXCLUDECLIPRECT,
    EMR_INTERSECTCLIPRECT,
    EMR_SCALEVIEWPORTEXTEX,
    EMR_SCALEWINDOWEXTEX,
    EMR_SAVEDC,
    EMR_RESTOREDC,
    EMR_SETWORLDTRANSFORM,
    EMR_MODIFYWORLDTRANSFORM,
    EMR_SELECTOBJECT,
    EMR_CREATEPEN,
    EMR_CREATEBRUSHINDIRECT,
    EMR_DELETEOBJECT,
    EMR_ANGLEARC,
    EMR_ELLIPSE,
    EMR_RECTANGLE,
    EMR_ROUNDRECT,
    EMR_ARC,
    EMR_CHORD,
    EMR_PIE,
    EMR_SELECTPALETTE,
    EMR_CREATEPALETTE,
    EMR_SETPALETTEENTRIES,
    EMR_RESIZEPALETTE,
    EMR_REALIZEPALETTE,
    EMR_EXTFLOODFILL,
    EMR_LINETO,
    EMR_ARCTO,
    EMR_POLYDRAW,
    EMR_SETARCDIRECTION,
    EMR_SETMITERLIMIT,
    EMR_BEGINPATH,
    EMR_ENDPATH,
    EMR_CLOSEFIGURE,
    EMR_FILLPATH,
    EMR_STROKEANDFILLPATH,
    EMR_STROKEPATH,
    EMR_FLATTENPATH,
    EMR_WIDENPATH,
    EMR_SELECTCLIPPATH,
    EMR_ABORTPATH,
    EMR_GDICOMMENT,
    EMR_FILLRGN,
    EMR_FRAMERGN,
    EMR_INVERTRGN,
    EMR_PAINTRGN,
    EMR_EXTSELECTCLIPRGN,
    EMR_BITBLT,
    EMR_STRETCHBLT,
    EMR_MASKBLT,
    EMR_PLGBLT,
    EMR_SETDIBITSTODEVICE,
    EMR_STRETCHDIBITS,
    EMR_EXTCREATEFONTINDIRECTW,
    EMR_EXTTEXTOUTA,
    EMR_EXTTEXTOUTW,
    EMR_POLYBEZIER16,
    EMR_POLYGON16,
    EMR_POLYLINE16,
    EMR_POLYBEZIERTO16,
    EMR_POLYLINETO16,
    EMR_POLYPOLYLINE16,
    EMR_POLYPOLYGON16,
    EMR_POLYDRAW16,
    EMR_CREATEMONOBRUSH,
    EMR_CREATEDIBPATTERNBRUSHPT,
    EMR_EXTCREATEPEN,
    EMR_POLYTEXTOUTA,
    EMR_POLYTEXTOUTW,
    EMR_SETICMMODE,
    EMR_CREATECOLORSPACE,
    EMR_SETCOLORSPACE,
    EMR_DELETECOLORSPACE,
    EMR_GLSRECORD,
    EMR_GLSBOUNDEDRECORD,
    EMR_PIXELFORMAT // = 104
}

const ENHMETA_SIGNATURE=1179469088;
const EPS_SIGNATURE=0x46535045;

static if (_WIN32_WINNT >= 0x0500) {
    const FR_PRIVATE=0x10;
    const FR_NOT_ENUM=0x20;
}

enum {
    META_SAVEDC                = 0x1E,
    META_REALIZEPALETTE        = 0x35,
    META_SETPALENTRIES         = 0x37,
    META_CREATEPALETTE         = 0xf7,
    META_SETBKMODE             = 0x102,
    META_SETMAPMODE            = 0x103,
    META_SETROP2               = 0x104,
    META_SETRELABS             = 0x105,
    META_SETPOLYFILLMODE       = 0x106,
    META_SETSTRETCHBLTMODE     = 0x107,
    META_SETTEXTCHAREXTRA      = 0x108,
    META_RESTOREDC             = 0x127,
    META_INVERTREGION          = 0x12A,
    META_PAINTREGION           = 0x12B,
    META_SELECTCLIPREGION      = 0x12C,
    META_SELECTOBJECT          = 0x12D,
    META_SETTEXTALIGN          = 0x12E,
    META_RESIZEPALETTE         = 0x139,
    META_DIBCREATEPATTERNBRUSH = 0x142,
    META_DELETEOBJECT          = 0x1f0,
    META_CREATEPATTERNBRUSH    = 0x1F9,
    META_SETBKCOLOR            = 0x201,
    META_SETTEXTCOLOR          = 0x209,
    META_SETTEXTJUSTIFICATION  = 0x20A,
    META_SETWINDOWORG          = 0x20B,
    META_SETWINDOWEXT          = 0x20C,
    META_SETVIEWPORTORG        = 0x20D,
    META_SETVIEWPORTEXT        = 0x20E,
    META_OFFSETWINDOWORG       = 0x20F,
    META_OFFSETVIEWPORTORG     = 0x211,
    META_LINETO                = 0x213,
    META_MOVETO                = 0x214,
    META_OFFSETCLIPRGN         = 0x220,
    META_FILLREGION            = 0x228,
    META_SETMAPPERFLAGS        = 0x231,
    META_SELECTPALETTE         = 0x234,
    META_CREATEPENINDIRECT     = 0x2FA,
    META_CREATEFONTINDIRECT    = 0x2FB,
    META_CREATEBRUSHINDIRECT   = 0x2FC,
    META_POLYGON               = 0x324,
    META_POLYLINE              = 0x325,
    META_SCALEWINDOWEXT        = 0x410,
    META_SCALEVIEWPORTEXT      = 0x412,
    META_EXCLUDECLIPRECT       = 0x415,
    META_INTERSECTCLIPRECT     = 0x416,
    META_ELLIPSE               = 0x418,
    META_FLOODFILL             = 0x419,
    META_RECTANGLE             = 0x41B,
    META_SETPIXEL              = 0x41F,
    META_FRAMEREGION           = 0x429,
    META_ANIMATEPALETTE        = 0x436,
    META_TEXTOUT               = 0x521,
    META_POLYPOLYGON           = 0x538,
    META_EXTFLOODFILL          = 0x548,
    META_ROUNDRECT             = 0x61C,
    META_PATBLT                = 0x61D,
    META_ESCAPE                = 0x626,
    META_CREATEREGION          = 0x6FF,
    META_ARC                   = 0x817,
    META_PIE                   = 0x81A,
    META_CHORD                 = 0x830,
    META_BITBLT                = 0x922,
    META_DIBBITBLT             = 0x940,
    META_EXTTEXTOUT            = 0xA32,
    META_STRETCHBLT            = 0xB23,
    META_DIBSTRETCHBLT         = 0xB41,
    META_SETDIBTODEV           = 0xD33,
    META_STRETCHDIB            = 0xF43
}

enum {
    PT_CLOSEFIGURE = 1,
    PT_LINETO      = 2,
    PT_BEZIERTO    = 4,
    PT_MOVETO      = 6
}

const ELF_VENDOR_SIZE=4;
const ELF_VERSION=0;
const ELF_CULTURE_LATIN=0;

const PFD_TYPE_RGBA=0;
const PFD_TYPE_COLORINDEX=1;
const PFD_MAIN_PLANE=0;
const PFD_OVERLAY_PLANE=1;
const PFD_UNDERLAY_PLANE=-1;
const PFD_DOUBLEBUFFER=1;
const PFD_STEREO=2;
const PFD_DRAW_TO_WINDOW=4;
const PFD_DRAW_TO_BITMAP=8;
const PFD_SUPPORT_GDI=16;
const PFD_SUPPORT_OPENGL=32;
const PFD_GENERIC_FORMAT=64;
const PFD_NEED_PALETTE=128;
const PFD_NEED_SYSTEM_PALETTE=0x00000100;
const PFD_SWAP_EXCHANGE=0x00000200;
const PFD_SWAP_COPY=0x00000400;
const PFD_SWAP_LAYER_BUFFERS=0x00000800;
const PFD_GENERIC_ACCELERATED=0x00001000;
const PFD_DEPTH_DONTCARE=0x20000000;
const PFD_DOUBLEBUFFER_DONTCARE=0x40000000;
const PFD_STEREO_DONTCARE=0x80000000;

enum {
    SP_ERROR= -1,
    SP_OUTOFDISK= -4,
    SP_OUTOFMEMORY= -5,
    SP_USERABORT=-3,
    SP_APPABORT=-2
}

const DWORD
    BLACKNESS  = 0x42,
    NOTSRCERASE= 0x1100A6,
    NOTSRCCOPY = 0x330008,
    SRCERASE   = 0x440328,
    DSTINVERT  = 0x550009,
    PATINVERT  = 0x5A0049,
    SRCINVERT  = 0x660046,
    SRCAND     = 0x8800C6,
    MERGEPAINT = 0xBB0226,
    MERGECOPY  = 0xC000CA,
    SRCCOPY    = 0xCC0020,
    SRCPAINT   = 0xEE0086,
    PATCOPY    = 0xF00021,
    PATPAINT   = 0xFB0A09,
    WHITENESS  = 0xFF0062;

const R2_BLACK       = 1;
const R2_NOTMERGEPEN = 2;
const R2_MASKNOTPEN  = 3;
const R2_NOTCOPYPEN  = 4;
const R2_MASKPENNOT  = 5;
const R2_NOT         = 6;
const R2_XORPEN      = 7;
const R2_NOTMASKPEN  = 8;
const R2_MASKPEN     = 9;
const R2_NOTXORPEN   = 10;
const R2_NOP         = 11;
const R2_MERGENOTPEN = 12;
const R2_COPYPEN     = 13;
const R2_MERGEPENNOT = 14;
const R2_MERGEPEN    = 15;
const R2_WHITE       = 16;

const CM_OUT_OF_GAMUT=255;
const CM_IN_GAMUT=0;

const RGN_AND  = 1;
const RGN_OR   = 2;
const RGN_XOR  = 3;
const RGN_DIFF = 4;
const RGN_COPY = 5;

enum {
    NULLREGION    = 1,
    SIMPLEREGION  = 2,
    COMPLEXREGION = 3
}

const ERROR=0;

const CBM_INIT=4;

const DIB_PAL_COLORS=1;
const DIB_RGB_COLORS=0;

const FW_DONTCARE   = 0;
const FW_THIN       = 100;
const FW_EXTRALIGHT = 200;
const FW_ULTRALIGHT = FW_EXTRALIGHT;
const FW_LIGHT      = 300;
const FW_NORMAL     = 400;
const FW_REGULAR    = 400;
const FW_MEDIUM     = 500;
const FW_SEMIBOLD   = 600;
const FW_DEMIBOLD   = FW_SEMIBOLD;
const FW_BOLD       = 700;
const FW_EXTRABOLD  = 800;
const FW_ULTRABOLD  = FW_EXTRABOLD;
const FW_HEAVY      = 900;
const FW_BLACK      = FW_HEAVY;

const ANSI_CHARSET=0;
const DEFAULT_CHARSET=1;
const SYMBOL_CHARSET=2;
const SHIFTJIS_CHARSET=128;
const HANGEUL_CHARSET=129;
const HANGUL_CHARSET=129;
const GB2312_CHARSET=134;
const CHINESEBIG5_CHARSET=136;
const GREEK_CHARSET=161;
const TURKISH_CHARSET=162;
const HEBREW_CHARSET=177;
const ARABIC_CHARSET=178;
const BALTIC_CHARSET=186;
const RUSSIAN_CHARSET=204;
const THAI_CHARSET=222;
const EASTEUROPE_CHARSET=238;
const OEM_CHARSET=255;
const JOHAB_CHARSET=130;
const VIETNAMESE_CHARSET=163;
const MAC_CHARSET=77;

enum {
    OUT_DEFAULT_PRECIS=0,
    OUT_STRING_PRECIS,
    OUT_CHARACTER_PRECIS,
    OUT_STROKE_PRECIS,
    OUT_TT_PRECIS,
    OUT_DEVICE_PRECIS,
    OUT_RASTER_PRECIS,
    OUT_TT_ONLY_PRECIS,
    OUT_OUTLINE_PRECIS
}

const CLIP_DEFAULT_PRECIS=0;
const CLIP_CHARACTER_PRECIS=1;
const CLIP_STROKE_PRECIS=2;
const CLIP_MASK=15;
const CLIP_LH_ANGLES=16;
const CLIP_TT_ALWAYS=32;
const CLIP_EMBEDDED=128;

enum {
    DEFAULT_QUALITY = 0,
    DRAFT_QUALITY,
    PROOF_QUALITY,
    NONANTIALIASED_QUALITY,
    ANTIALIASED_QUALITY
}

const DEFAULT_PITCH  = 0;
const FIXED_PITCH    = 1;
const VARIABLE_PITCH = 2;
const MONO_FONT      = 8;

const FF_DONTCARE   = 0;
const FF_ROMAN      = 16;
const FF_SWISS      = 32;
const FF_SCRIPT     = 64;
const FF_MODERN     = 48;
const FF_DECORATIVE = 80;

const PANOSE_COUNT=10;

const PAN_FAMILYTYPE_INDEX=0;
const PAN_SERIFSTYLE_INDEX=1;
const PAN_WEIGHT_INDEX=2;
const PAN_PROPORTION_INDEX=3;
const PAN_CONTRAST_INDEX=4;
const PAN_STROKEVARIATION_INDEX=5;
const PAN_ARMSTYLE_INDEX=6;
const PAN_LETTERFORM_INDEX=7;
const PAN_MIDLINE_INDEX=8;
const PAN_XHEIGHT_INDEX=9;
const PAN_CULTURE_LATIN=0;

const PAN_ANY=0;
const PAN_NO_FIT=1;

const PAN_FAMILY_TEXT_DISPLAY=2;
const PAN_FAMILY_SCRIPT=3;
const PAN_FAMILY_DECORATIVE=4;
const PAN_FAMILY_PICTORIAL=5;
const PAN_SERIF_COVE=2;
const PAN_SERIF_OBTUSE_COVE=3;
const PAN_SERIF_SQUARE_COVE=4;
const PAN_SERIF_OBTUSE_SQUARE_COVE=5;
const PAN_SERIF_SQUARE=6;
const PAN_SERIF_THIN=7;
const PAN_SERIF_BONE=8;
const PAN_SERIF_EXAGGERATED=9;
const PAN_SERIF_TRIANGLE=10;
const PAN_SERIF_NORMAL_SANS=11;
const PAN_SERIF_OBTUSE_SANS=12;
const PAN_SERIF_PERP_SANS=13;
const PAN_SERIF_FLARED=14;
const PAN_SERIF_ROUNDED=15;

const PAN_WEIGHT_VERY_LIGHT=2;
const PAN_WEIGHT_LIGHT=3;
const PAN_WEIGHT_THIN=4;
const PAN_WEIGHT_BOOK=5;
const PAN_WEIGHT_MEDIUM=6;
const PAN_WEIGHT_DEMI=7;
const PAN_WEIGHT_BOLD=8;
const PAN_WEIGHT_HEAVY=9;
const PAN_WEIGHT_BLACK=10;
const PAN_WEIGHT_NORD=11;

const PAN_PROP_OLD_STYLE=2;
const PAN_PROP_MODERN=3;
const PAN_PROP_EVEN_WIDTH=4;
const PAN_PROP_EXPANDED=5;
const PAN_PROP_CONDENSED=6;
const PAN_PROP_VERY_EXPANDED=7;
const PAN_PROP_VERY_CONDENSED=8;
const PAN_PROP_MONOSPACED=9;

const PAN_CONTRAST_NONE=2;
const PAN_CONTRAST_VERY_LOW=3;
const PAN_CONTRAST_LOW=4;
const PAN_CONTRAST_MEDIUM_LOW=5;
const PAN_CONTRAST_MEDIUM=6;
const PAN_CONTRAST_MEDIUM_HIGH=7;
const PAN_CONTRAST_HIGH=8;
const PAN_CONTRAST_VERY_HIGH=9;

const PAN_STROKE_GRADUAL_DIAG=2;
const PAN_STROKE_GRADUAL_TRAN=3;
const PAN_STROKE_GRADUAL_VERT=4;
const PAN_STROKE_GRADUAL_HORZ=5;
const PAN_STROKE_RAPID_VERT=6;
const PAN_STROKE_RAPID_HORZ=7;
const PAN_STROKE_INSTANT_VERT=8;

const PAN_STRAIGHT_ARMS_HORZ=2;
const PAN_STRAIGHT_ARMS_WEDGE=3;
const PAN_STRAIGHT_ARMS_VERT=4;
const PAN_STRAIGHT_ARMS_SINGLE_SERIF=5;
const PAN_STRAIGHT_ARMS_DOUBLE_SERIF=6;

const PAN_BENT_ARMS_HORZ=7;
const PAN_BENT_ARMS_WEDGE=8;
const PAN_BENT_ARMS_VERT=9;
const PAN_BENT_ARMS_SINGLE_SERIF=10;
const PAN_BENT_ARMS_DOUBLE_SERIF=11;

const PAN_LETT_NORMAL_CONTACT=2;
const PAN_LETT_NORMAL_WEIGHTED=3;
const PAN_LETT_NORMAL_BOXED=4;
const PAN_LETT_NORMAL_FLATTENED=5;
const PAN_LETT_NORMAL_ROUNDED=6;
const PAN_LETT_NORMAL_OFF_CENTER=7;
const PAN_LETT_NORMAL_SQUARE=8;
const PAN_LETT_OBLIQUE_CONTACT=9;
const PAN_LETT_OBLIQUE_WEIGHTED=10;
const PAN_LETT_OBLIQUE_BOXED=11;
const PAN_LETT_OBLIQUE_FLATTENED=12;
const PAN_LETT_OBLIQUE_ROUNDED=13;
const PAN_LETT_OBLIQUE_OFF_CENTER=14;
const PAN_LETT_OBLIQUE_SQUARE=15;

const PAN_MIDLINE_STANDARD_TRIMMED=2;
const PAN_MIDLINE_STANDARD_POINTED=3;
const PAN_MIDLINE_STANDARD_SERIFED=4;
const PAN_MIDLINE_HIGH_TRIMMED=5;
const PAN_MIDLINE_HIGH_POINTED=6;
const PAN_MIDLINE_HIGH_SERIFED=7;
const PAN_MIDLINE_CONSTANT_TRIMMED=8;
const PAN_MIDLINE_CONSTANT_POINTED=9;
const PAN_MIDLINE_CONSTANT_SERIFED=10;
const PAN_MIDLINE_LOW_TRIMMED=11;
const PAN_MIDLINE_LOW_POINTED=12;
const PAN_MIDLINE_LOW_SERIFED=13;

const PAN_XHEIGHT_CONSTANT_SMALL=2;
const PAN_XHEIGHT_CONSTANT_STD=3;
const PAN_XHEIGHT_CONSTANT_LARGE=4;
const PAN_XHEIGHT_DUCKING_SMALL=5;
const PAN_XHEIGHT_DUCKING_STD=6;
const PAN_XHEIGHT_DUCKING_LARGE=7;

const FS_LATIN1=1;
const FS_LATIN2=2;
const FS_CYRILLIC=4;
const FS_GREEK=8;
const FS_TURKISH=16;
const FS_HEBREW=32;
const FS_ARABIC=64;
const FS_BALTIC=128;
const FS_THAI=0x10000;
const FS_JISJAPAN=0x20000;
const FS_CHINESESIMP=0x40000;
const FS_WANSUNG=0x80000;
const FS_CHINESETRAD=0x100000;
const FS_JOHAB=0x200000;
const FS_SYMBOL=0x80000000;

enum {
    HS_HORIZONTAL=0,
    HS_VERTICAL,
    HS_FDIAGONAL,
    HS_BDIAGONAL,
    HS_CROSS,
    HS_DIAGCROSS
}

const PS_GEOMETRIC=65536;
const PS_COSMETIC=0;
const PS_ALTERNATE=8;
const PS_SOLID=0;
const PS_DASH=1;
const PS_DOT=2;
const PS_DASHDOT=3;
const PS_DASHDOTDOT=4;
const PS_NULL=5;
const PS_USERSTYLE=7;
const PS_INSIDEFRAME=6;
const PS_ENDCAP_ROUND=0;
const PS_ENDCAP_SQUARE=256;
const PS_ENDCAP_FLAT=512;
const PS_JOIN_BEVEL=4096;
const PS_JOIN_MITER=8192;
const PS_JOIN_ROUND=0;
const PS_STYLE_MASK=15;
const PS_ENDCAP_MASK=3840;
const PS_TYPE_MASK=983040;

const ALTERNATE=1;
const WINDING=2;

const DC_BINNAMES=12;
const DC_BINS=6;
const DC_COPIES=18;
const DC_DRIVER=11;
const DC_DATATYPE_PRODUCED=21;
const DC_DUPLEX=7;
const DC_EMF_COMPLIANT=20;
const DC_ENUMRESOLUTIONS=13;
const DC_EXTRA=9;
const DC_FIELDS=1;
const DC_FILEDEPENDENCIES=14;
const DC_MAXEXTENT=5;
const DC_MINEXTENT=4;
const DC_ORIENTATION=17;
const DC_PAPERNAMES=16;
const DC_PAPERS=2;
const DC_PAPERSIZE=3;
const DC_SIZE=8;
const DC_TRUETYPE=15;
const DCTT_BITMAP=1;
const DCTT_DOWNLOAD=2;
const DCTT_SUBDEV=4;
const DCTT_DOWNLOAD_OUTLINE=8;
const DC_VERSION=10;
const DC_BINADJUST=19;
const DC_MANUFACTURER=23;
const DC_MODEL=24;

const DCBA_FACEUPNONE=0;
const DCBA_FACEUPCENTER=1;
const DCBA_FACEUPLEFT=2;
const DCBA_FACEUPRIGHT=3;
const DCBA_FACEDOWNNONE=256;
const DCBA_FACEDOWNCENTER=257;
const DCBA_FACEDOWNLEFT=258;
const DCBA_FACEDOWNRIGHT=259;

const FLOODFILLBORDER  = 0;
const FLOODFILLSURFACE = 1;

const ETO_OPAQUE      = 2;
const ETO_CLIPPED     = 4;
const ETO_GLYPH_INDEX = 16;
const ETO_RTLREADING  = 128;

enum {
	GDICOMMENT_WINDOWS_METAFILE = -2147483647,
	GDICOMMENT_BEGINGROUP       = 2,
	GDICOMMENT_ENDGROUP         = 3,
	GDICOMMENT_MULTIFORMATS     = 1073741828,
	GDICOMMENT_IDENTIFIER       = 1128875079
}

const AD_COUNTERCLOCKWISE = 1;
const AD_CLOCKWISE        = 2;

const RDH_RECTANGLES = 1;

const GCPCLASS_LATIN=1;
const GCPCLASS_HEBREW=2;
const GCPCLASS_ARABIC=2;
const GCPCLASS_NEUTRAL=3;
const GCPCLASS_LOCALNUMBER=4;
const GCPCLASS_LATINNUMBER=5;
const GCPCLASS_LATINNUMERICTERMINATOR=6;
const GCPCLASS_LATINNUMERICSEPARATOR=7;
const GCPCLASS_NUMERICSEPARATOR=8;
const GCPCLASS_PREBOUNDLTR=128;
const GCPCLASS_PREBOUNDRTL=64;
const GCPCLASS_POSTBOUNDLTR=32;
const GCPCLASS_POSTBOUNDRTL=16;
const GCPGLYPH_LINKBEFORE=0x8000;
const GCPGLYPH_LINKAFTER=0x4000;

const DCB_RESET=1;
const DCB_SET=3;
const DCB_ACCUMULATE=2;
const DCB_ENABLE=4;
const DCB_DISABLE=8;
const DCB_DIRTY=2;

enum {
	OBJ_PEN = 1,
	OBJ_BRUSH,
	OBJ_DC,
	OBJ_METADC,
	OBJ_PAL,
	OBJ_FONT,
	OBJ_BITMAP,
	OBJ_REGION,
	OBJ_METAFILE,
	OBJ_MEMDC,
	OBJ_EXTPEN,
	OBJ_ENHMETADC,
	OBJ_ENHMETAFILE // = 13
}

//---------------------
// Capabilities for GetDeviceCaps(dc, xxx)

const DRIVERVERSION=0;
const TECHNOLOGY=2;
const HORZSIZE=4;
const VERTSIZE=6;
const HORZRES=8;
const VERTRES=10;
const BITSPIXEL=12;
const PLANES=14;
const NUMBRUSHES=16;
const NUMPENS=18;
const NUMMARKERS=20;
const NUMFONTS=22;
const NUMCOLORS=24;
const PDEVICESIZE=26;
const CURVECAPS=28;
const LINECAPS=30;
const POLYGONALCAPS=32;
const TEXTCAPS=34;
const CLIPCAPS=36;
const RASTERCAPS=38;
const ASPECTX=40;
const ASPECTY=42;
const ASPECTXY=44;

const LOGPIXELSX=88;
const LOGPIXELSY=90;

const SIZEPALETTE=104;
const NUMRESERVED=106;
const COLORRES=108;
const PHYSICALWIDTH=110;
const PHYSICALHEIGHT=111;
const PHYSICALOFFSETX=112;
const PHYSICALOFFSETY=113;
const SCALINGFACTORX=114;
const SCALINGFACTORY=115;
const VREFRESH=116;
const DESKTOPVERTRES=117;
const DESKTOPHORZRES=118;
const BLTALIGNMENT=119;

// Return values for GetDeviceCaps(dc, TECHNOLOGY)
enum : int {
    DT_PLOTTER = 0,
    DT_RASDISPLAY,
    DT_RASPRINTER,
    DT_RASCAMERA,
    DT_CHARSTREAM,
    DT_METAFILE,
    DT_DISPFILE // = 6
}

// Return values for GetDeviceCaps(dc, RASTERCAPS)
const int
    RC_NONE         = 0,
    RC_BITBLT       = 1,
    RC_BANDING      = 2,
    RC_SCALING      = 4,
    RC_BITMAP64     = 8,
    RC_GDI20_OUTPUT = 16,
    RC_GDI20_STATE  = 32,
    RC_SAVEBITMAP   = 64,
    RC_DI_BITMAP    = 128,
    RC_PALETTE      = 256,
    RC_DIBTODEV     = 512,
    RC_BIGFONT      = 1024,
    RC_STRETCHBLT   = 2048,
    RC_FLOODFILL    = 4096,
    RC_STRETCHDIB   = 8192,
    RC_OP_DX_OUTPUT = 0x4000,
    RC_DEVBITS      = 0x8000;

// Return values for GetDeviceCaps(dc, CURVECAPS)
const int
    CC_NONE       = 0,
    CC_CIRCLES    = 1,
    CC_PIE        = 2,
    CC_CHORD      = 4,
    CC_ELLIPSES   = 8,
    CC_WIDE       = 16,
    CC_STYLED     = 32,
    CC_WIDESTYLED = 64,
    CC_INTERIORS  = 128,
    CC_ROUNDRECT  = 256;

// Return values for GetDeviceCaps(dc, LINECAPS)

const int
    LC_NONE       = 0,
    LC_POLYLINE   = 2,
    LC_MARKER     = 4,
    LC_POLYMARKER = 8,
    LC_WIDE       = 16,
    LC_STYLED     = 32,
    LC_WIDESTYLED = 64,
    LC_INTERIORS  = 128;

// Return values for GetDeviceCaps(dc, POLYGONALCAPS)

const int
    PC_NONE        = 0,
    PC_POLYGON     = 1,
    PC_RECTANGLE   = 2,
    PC_WINDPOLYGON = 4,
    PC_TRAPEZOID   = 4,
    PC_SCANLINE    = 8,
    PC_WIDE        = 16,
    PC_STYLED      = 32,
    PC_WIDESTYLED  = 64,
    PC_INTERIORS   = 128,
    PC_POLYPOLYGON = 256,
    PC_PATHS       = 512;

// Return values for GetDeviceCaps(dc, TEXTCAPS)

const int
    TC_OP_CHARACTER = 1,
    TC_OP_STROKE    = 2,
    TC_CP_STROKE    = 4,
    TC_CR_90        = 8,
    TC_CR_ANY       = 16,
    TC_SF_X_YINDEP  = 32,
    TC_SA_DOUBLE    = 64,
    TC_SA_INTEGER   = 128,
    TC_SA_CONTIN    = 256,
    TC_EA_DOUBLE    = 512,
    TC_IA_ABLE      = 1024,
    TC_UA_ABLE      = 2048,
    TC_SO_ABLE      = 4096,
    TC_RA_ABLE      = 8192,
    TC_VA_ABLE      = 16384,
    TC_RESERVED     = 32768,
    TC_SCROLLBLT    = 65536;

// End GetDeviceCaps
//---------------------

const GCP_DBCS = 1;
const GCP_ERROR = 0x8000;
const GCP_CLASSIN = 0x80000;
const GCP_DIACRITIC = 256;
const GCP_DISPLAYZWG = 0x400000;
const GCP_GLYPHSHAPE = 16;
const GCP_JUSTIFY = 0x10000;
const GCP_JUSTIFYIN = 0x200000;
const GCP_KASHIDA = 1024;
const GCP_LIGATE = 32;
const GCP_MAXEXTENT = 0x100000;
const GCP_NEUTRALOVERRIDE = 0x2000000;
const GCP_NUMERICOVERRIDE = 0x1000000;
const GCP_NUMERICSLATIN = 0x4000000;
const GCP_NUMERICSLOCAL = 0x8000000;
const GCP_REORDER = 2;
const GCP_SYMSWAPOFF = 0x800000;
const GCP_USEKERNING = 8;

const FLI_GLYPHS = 0x40000;
const FLI_MASK = 0x103b;

const GGO_METRICS=0;
const GGO_BITMAP=1;
const GGO_NATIVE=2;
const GGO_BEZIER=3;
const GGO_GRAY2_BITMAP=4;
const GGO_GRAY4_BITMAP=5;
const GGO_GRAY8_BITMAP=6;
const GGO_GLYPH_INDEX=128;
const GGO_UNHINTED=256;
const GM_COMPATIBLE=1;
const GM_ADVANCED=2;

const MM_ANISOTROPIC=8;
const MM_HIENGLISH=5;
const MM_HIMETRIC=3;
const MM_ISOTROPIC=7;
const MM_LOENGLISH=4;
const MM_LOMETRIC=2;
const MM_TEXT=1;
const MM_TWIPS=6;
const MM_MAX_FIXEDSCALE=MM_TWIPS;

const ABSOLUTE=1;
const RELATIVE=2;

const PC_EXPLICIT=2;
const PC_NOCOLLAPSE=4;
const PC_RESERVED=1;

const CLR_NONE=0xffffffff;
const CLR_INVALID=CLR_NONE;
const CLR_DEFAULT=0xff000000;
// [Redefined] PT_MOVETO=6
// [Redefined] PT_LINETO=2
// [Redefined] PT_BEZIERTO=4
// [Redefined] PT_CLOSEFIGURE=1
const TT_AVAILABLE=1;
const TT_ENABLED=2;

const BLACK_BRUSH=4;
const DKGRAY_BRUSH=3;
const GRAY_BRUSH=2;
const HOLLOW_BRUSH=5;
const LTGRAY_BRUSH=1;
const NULL_BRUSH=5;
const WHITE_BRUSH=0;
const BLACK_PEN=7;
const NULL_PEN=8;
const WHITE_PEN=6;
const ANSI_FIXED_FONT=11;
const ANSI_VAR_FONT=12;
const DEVICE_DEFAULT_FONT=14;
const DEFAULT_GUI_FONT=17;
const OEM_FIXED_FONT=10;
const SYSTEM_FONT=13;
const SYSTEM_FIXED_FONT=16;
const DEFAULT_PALETTE=15;

static if (_WIN32_WINNT >= 0x0500) {
    const DC_BRUSH=18;
    const DC_PEN=19;
}
const SYSPAL_ERROR=0;
const SYSPAL_STATIC=1;
const SYSPAL_NOSTATIC=2;

const TA_TOP=0;
const TA_CENTER=6;
const TA_BOTTOM=8;
const TA_BASELINE=24;
const TA_LEFT=0;
const TA_RIGHT=2;
const TA_RTLREADING=256;
const TA_NOUPDATECP=0;
const TA_UPDATECP=1;
const TA_MASK= TA_BASELINE+TA_CENTER+TA_UPDATECP+TA_RTLREADING;

const VTA_BASELINE=24;
const VTA_CENTER=6;
const VTA_LEFT=TA_BOTTOM;
const VTA_RIGHT=TA_TOP;
const VTA_BOTTOM=TA_RIGHT;
const VTA_TOP=TA_LEFT;

const MWT_IDENTITY=1;
const MWT_LEFTMULTIPLY=2;
const MWT_RIGHTMULTIPLY=3;

const OPAQUE=2;
const TRANSPARENT=1;

const BLACKONWHITE=1;
const WHITEONBLACK=2;
const COLORONCOLOR=3;
const HALFTONE=4;
const MAXSTRETCHBLTMODE=4;

const STRETCH_ANDSCANS=1;
const STRETCH_DELETESCANS=3;
const STRETCH_HALFTONE=4;
const STRETCH_ORSCANS=2;

const TCI_SRCCHARSET=1;
const TCI_SRCCODEPAGE=2;
const TCI_SRCFONTSIG=3;

const ICM_ON=2;
const ICM_OFF=1;
const ICM_QUERY=3;

const NEWFRAME=1;
const ABORTDOC=2;
const NEXTBAND=3;
const SETCOLORTABLE=4;
const GETCOLORTABLE=5;
const FLUSHOUTPUT=6;
const DRAFTMODE=7;
const QUERYESCSUPPORT=8;
const SETABORTPROC=9;
const STARTDOC=10;
const ENDDOC=11;
const GETPHYSPAGESIZE=12;
const GETPRINTINGOFFSET=13;
const GETSCALINGFACTOR=14;
const MFCOMMENT=15;
const GETPENWIDTH=16;
const SETCOPYCOUNT=17;
const SELECTPAPERSOURCE=18;
const DEVICEDATA=19;
const PASSTHROUGH=19;
//const GETTECHNOLGY=20;  // misspelt!
const GETTECHNOLOGY=20;
const SETLINECAP=21;
const SETLINEJOIN=22;
const SETMITERLIMIT=23;
const BANDINFO=24;
const DRAWPATTERNRECT=25;
const GETVECTORPENSIZE=26;
const GETVECTORBRUSHSIZE=27;
const ENABLEDUPLEX=28;
const GETSETPAPERBINS=29;
const GETSETPRINTORIENT=30;
const ENUMPAPERBINS=31;
const SETDIBSCALING=32;
const EPSPRINTING=33;
const ENUMPAPERMETRICS=34;
const GETSETPAPERMETRICS=35;
const POSTSCRIPT_DATA=37;
const POSTSCRIPT_IGNORE=38;
const MOUSETRAILS=39;
const GETDEVICEUNITS=42;
const GETEXTENDEDTEXTMETRICS=256;
const GETEXTENTTABLE=257;
const GETPAIRKERNTABLE=258;
const GETTRACKKERNTABLE=259;
const EXTTEXTOUT=512;
const GETFACENAME=513;
const DOWNLOADFACE=514;
const ENABLERELATIVEWIDTHS=768;
const ENABLEPAIRKERNING=769;
const SETKERNTRACK=770;
const SETALLJUSTVALUES=771;
const SETCHARSET=772;
const STRETCHBLT=2048;
const GETSETSCREENPARAMS=3072;
const QUERYDIBSUPPORT=3073;
const BEGIN_PATH=4096;
const CLIP_TO_PATH=4097;
const END_PATH=4098;
const EXT_DEVICE_CAPS=4099;
const RESTORE_CTM=4100;
const SAVE_CTM=4101;
const SET_ARC_DIRECTION=4102;
const SET_BACKGROUND_COLOR=4103;
const SET_POLY_MODE=4104;
const SET_SCREEN_ANGLE=4105;
const SET_SPREAD=4106;
const TRANSFORM_CTM=4107;
const SET_CLIP_BOX=4108;
const SET_BOUNDS=4109;
const SET_MIRROR_MODE=4110;
const OPENCHANNEL=4110;
const DOWNLOADHEADER=4111;
const CLOSECHANNEL=4112;
const POSTSCRIPT_PASSTHROUGH=4115;
const ENCAPSULATED_POSTSCRIPT=4116;

const QDI_SETDIBITS=1;
const QDI_GETDIBITS=2;
const QDI_DIBTOSCREEN=4;
const QDI_STRETCHDIB=8;

const SP_NOTREPORTED=0x4000;

const PR_JOBSTATUS=0;

const ASPECT_FILTERING=1;

const BS_SOLID=0;
const BS_NULL=1;
const BS_HOLLOW=1;
const BS_HATCHED=2;
const BS_PATTERN=3;
const BS_INDEXED=4;
const BS_DIBPATTERN=5;
const BS_DIBPATTERNPT=6;
const BS_PATTERN8X8=7;
const BS_DIBPATTERN8X8=8;

const LCS_CALIBRATED_RGB=0;
const LCS_DEVICE_RGB=1;
const LCS_DEVICE_CMYK=2;
const LCS_GM_BUSINESS=1;
const LCS_GM_GRAPHICS=2;
const LCS_GM_IMAGES=4;

const RASTER_FONTTYPE=1;
const DEVICE_FONTTYPE=2;
const TRUETYPE_FONTTYPE=4;

const DMORIENT_PORTRAIT=1;
const DMORIENT_LANDSCAPE=2;

const DMPAPER_FIRST=1;
const DMPAPER_LETTER=1;
const DMPAPER_LETTERSMALL=2;
const DMPAPER_TABLOID=3;
const DMPAPER_LEDGER=4;
const DMPAPER_LEGAL=5;
const DMPAPER_STATEMENT=6;
const DMPAPER_EXECUTIVE=7;
const DMPAPER_A3=8;
const DMPAPER_A4=9;
const DMPAPER_A4SMALL=10;
const DMPAPER_A5=11;
const DMPAPER_B4=12;
const DMPAPER_B5=13;
const DMPAPER_FOLIO=14;
const DMPAPER_QUARTO=15;
const DMPAPER_10X14=16;
const DMPAPER_11X17=17;
const DMPAPER_NOTE=18;
const DMPAPER_ENV_9=19;
const DMPAPER_ENV_10=20;
const DMPAPER_ENV_11=21;
const DMPAPER_ENV_12=22;
const DMPAPER_ENV_14=23;
const DMPAPER_CSHEET=24;
const DMPAPER_DSHEET=25;
const DMPAPER_ESHEET=26;
const DMPAPER_ENV_DL=27;
const DMPAPER_ENV_C5=28;
const DMPAPER_ENV_C3=29;
const DMPAPER_ENV_C4=30;
const DMPAPER_ENV_C6=31;
const DMPAPER_ENV_C65=32;
const DMPAPER_ENV_B4=33;
const DMPAPER_ENV_B5=34;
const DMPAPER_ENV_B6=35;
const DMPAPER_ENV_ITALY=36;
const DMPAPER_ENV_MONARCH=37;
const DMPAPER_ENV_PERSONAL=38;
const DMPAPER_FANFOLD_US=39;
const DMPAPER_FANFOLD_STD_GERMAN=40;
const DMPAPER_FANFOLD_LGL_GERMAN=41;
const DMPAPER_ISO_B4=42;
const DMPAPER_JAPANESE_POSTCARD=43;
const DMPAPER_9X11=44;
const DMPAPER_10X11=45;
const DMPAPER_15X11=46;
const DMPAPER_ENV_INVITE=47;
const DMPAPER_RESERVED_48=48;
const DMPAPER_RESERVED_49=49;
const DMPAPER_LETTER_EXTRA=50;
const DMPAPER_LEGAL_EXTRA=51;
const DMPAPER_TABLOID_EXTRA=52;
const DMPAPER_A4_EXTRA=53;
const DMPAPER_LETTER_TRANSVERSE=54;
const DMPAPER_A4_TRANSVERSE=55;
const DMPAPER_LETTER_EXTRA_TRANSVERSE=56;
const DMPAPER_A_PLUS=57;
const DMPAPER_B_PLUS=58;
const DMPAPER_LETTER_PLUS=59;
const DMPAPER_A4_PLUS=60;
const DMPAPER_A5_TRANSVERSE=61;
const DMPAPER_B5_TRANSVERSE=62;
const DMPAPER_A3_EXTRA=63;
const DMPAPER_A5_EXTRA=64;
const DMPAPER_B5_EXTRA=65;
const DMPAPER_A2=66;
const DMPAPER_A3_TRANSVERSE=67;
const DMPAPER_A3_EXTRA_TRANSVERSE=68;
const DMPAPER_LAST=68;
const DMPAPER_USER=256;

const DMBIN_FIRST=1;
const DMBIN_UPPER=1;
const DMBIN_ONLYONE=1;
const DMBIN_LOWER=2;
const DMBIN_MIDDLE=3;
const DMBIN_MANUAL=4;
const DMBIN_ENVELOPE=5;
const DMBIN_ENVMANUAL=6;
const DMBIN_AUTO=7;
const DMBIN_TRACTOR=8;
const DMBIN_SMALLFMT=9;
const DMBIN_LARGEFMT=10;
const DMBIN_LARGECAPACITY=11;
const DMBIN_CASSETTE=14;
const DMBIN_FORMSOURCE=15;
const DMBIN_LAST=15;
const DMBIN_USER=256;

const DMRES_DRAFT  = -1;
const DMRES_LOW    = -2;
const DMRES_MEDIUM = -3;
const DMRES_HIGH   = -4;

const DMCOLOR_MONOCHROME = 1;
const DMCOLOR_COLOR = 2;

const DMDUP_SIMPLEX = 1;
const DMDUP_VERTICAL = 2;
const DMDUP_HORIZONTAL = 3;

const DMTT_BITMAP = 1;
const DMTT_DOWNLOAD = 2;
const DMTT_SUBDEV = 3;
const DMTT_DOWNLOAD_OUTLINE = 4;

const DMCOLLATE_FALSE = 0;
const DMCOLLATE_TRUE = 1;

const DM_SPECVERSION = 800;
const DM_GRAYSCALE = 1;
const DM_INTERLACED = 2;
const DM_UPDATE = 1;
const DM_COPY = 2;
const DM_PROMPT = 4;
const DM_MODIFY = 8;
const DM_IN_BUFFER = DM_MODIFY;
const DM_IN_PROMPT = DM_PROMPT;
const DM_OUT_BUFFER = DM_COPY;
const DM_OUT_DEFAULT = DM_UPDATE;
const DM_ORIENTATION = 1;
const DM_PAPERSIZE = 2;
const DM_PAPERLENGTH = 4;
const DM_PAPERWIDTH = 8;
const DM_SCALE = 16;
const DM_COPIES = 256;
const DM_DEFAULTSOURCE = 512;
const DM_PRINTQUALITY = 1024;
const DM_COLOR = 2048;
const DM_DUPLEX = 4096;
const DM_YRESOLUTION = 8192;
const DM_TTOPTION = 16384;
const DM_COLLATE = 32768;
const DM_FORMNAME = 65536;
const DM_LOGPIXELS = 0x20000;
const DM_BITSPERPEL = 0x40000;
const DM_PELSWIDTH = 0x80000;
const DM_PELSHEIGHT = 0x100000;
const DM_DISPLAYFLAGS = 0x200000;
const DM_DISPLAYFREQUENCY = 0x400000;
const DM_ICMMETHOD = 0x800000;
const DM_ICMINTENT = 0x1000000;
const DM_MEDIATYPE = 0x2000000;
const DM_DITHERTYPE = 0x4000000;

const DMICMMETHOD_NONE = 1;
const DMICMMETHOD_SYSTEM = 2;
const DMICMMETHOD_DRIVER = 3;
const DMICMMETHOD_DEVICE = 4;
const DMICMMETHOD_USER = 256;
const DMICM_SATURATE = 1;
const DMICM_CONTRAST = 2;
const DMICM_COLORMETRIC = 3;
const DMICM_USER = 256;

const DMMEDIA_STANDARD = 1;
const DMMEDIA_TRANSPARENCY = 2;
const DMMEDIA_GLOSSY = 3;
const DMMEDIA_USER = 256;

enum  {
    DMDITHER_NONE = 1,
    DMDITHER_COARSE,
    DMDITHER_FINE,
    DMDITHER_LINEART,
    DMDITHER_ERRORDIFFUSION,
    DMDITHER_RESERVED6,
    DMDITHER_RESERVED7,
    DMDITHER_RESERVED8,
    DMDITHER_RESERVED9,
    DMDITHER_GRAYSCALE,
    DMDITHER_USER=256
}

const GDI_ERROR=0xFFFFFFFF;
const HGDI_ERROR= cast(HANDLE)GDI_ERROR;

const TMPF_FIXED_PITCH = 1;
const TMPF_VECTOR = 2;
const TMPF_TRUETYPE = 4;
const TMPF_DEVICE = 8;

const NTM_ITALIC = 1;
const NTM_BOLD = 32;
const NTM_REGULAR = 64;

const TT_POLYGON_TYPE = 24;
const TT_PRIM_LINE = 1;
const TT_PRIM_QSPLINE = 2;

const FONTMAPPER_MAX = 10;
const ENHMETA_STOCK_OBJECT = 0x80000000;
const WGL_FONT_LINES = 0;
const WGL_FONT_POLYGONS = 1;

const LPD_DOUBLEBUFFER = 1;
const LPD_STEREO = 2;
const LPD_SUPPORT_GDI = 16;
const LPD_SUPPORT_OPENGL = 32;
const LPD_SHARE_DEPTH = 64;
const LPD_SHARE_STENCIL = 128;
const LPD_SHARE_ACCUM = 256;
const LPD_SWAP_EXCHANGE = 512;
const LPD_SWAP_COPY = 1024;
const LPD_TRANSPARENT = 4096;
const LPD_TYPE_RGBA = 0;
const LPD_TYPE_COLORINDEX = 1;

const WGL_SWAP_MAIN_PLANE = 1;
const WGL_SWAP_OVERLAY1 = 2;
const WGL_SWAP_OVERLAY2 = 4;
const WGL_SWAP_OVERLAY3 = 8;
const WGL_SWAP_OVERLAY4 = 16;
const WGL_SWAP_OVERLAY5 = 32;
const WGL_SWAP_OVERLAY6 = 64;
const WGL_SWAP_OVERLAY7 = 128;
const WGL_SWAP_OVERLAY8 = 256;
const WGL_SWAP_OVERLAY9 = 512;
const WGL_SWAP_OVERLAY10 = 1024;
const WGL_SWAP_OVERLAY11 = 2048;
const WGL_SWAP_OVERLAY12 = 4096;
const WGL_SWAP_OVERLAY13 = 8192;
const WGL_SWAP_OVERLAY14 = 16384;
const WGL_SWAP_OVERLAY15 = 32768;
const WGL_SWAP_UNDERLAY1 = 65536;
const WGL_SWAP_UNDERLAY2 = 0x20000;
const WGL_SWAP_UNDERLAY3 = 0x40000;
const WGL_SWAP_UNDERLAY4 = 0x80000;
const WGL_SWAP_UNDERLAY5 = 0x100000;
const WGL_SWAP_UNDERLAY6 = 0x200000;
const WGL_SWAP_UNDERLAY7 = 0x400000;
const WGL_SWAP_UNDERLAY8 = 0x800000;
const WGL_SWAP_UNDERLAY9 = 0x1000000;
const WGL_SWAP_UNDERLAY10 = 0x2000000;
const WGL_SWAP_UNDERLAY11 = 0x4000000;
const WGL_SWAP_UNDERLAY12 = 0x8000000;
const WGL_SWAP_UNDERLAY13 = 0x10000000;
const WGL_SWAP_UNDERLAY14 = 0x20000000;
const WGL_SWAP_UNDERLAY15 = 0x40000000;

const AC_SRC_OVER = 0x00;
const AC_SRC_ALPHA = 0x01;
const AC_SRC_NO_PREMULT_ALPHA = 0x01;
const AC_SRC_NO_ALPHA = 0x02;
const AC_DST_NO_PREMULT_ALPHA = 0x10;
const AC_DST_NO_ALPHA = 0x20;

const LAYOUT_RTL=1;
const LAYOUT_BITMAPORIENTATIONPRESERVED=8;
static if (WINVER > 0x0400) {
    const CS_ENABLE=0x00000001;
    const CS_DISABLE=0x00000002;
    const CS_DELETE_TRANSFORM=0x00000003;
}
static if (WINVER > 0x0500) {
    const GRADIENT_FILL_RECT_H=0x00;
    const GRADIENT_FILL_RECT_V=0x01;
    const GRADIENT_FILL_TRIANGLE=0x02;
    const GRADIENT_FILL_OP_FLAG=0xff;
    const COLORMATCHTOTARGET_EMBEDED=0x00000001;
    const CREATECOLORSPACE_EMBEDED=0x00000001;
    const SETICMPROFILE_EMBEDED=0x00000001;
}

const DISPLAY_DEVICE_ATTACHED_TO_DESKTOP = 0x00000001;
const DISPLAY_DEVICE_MULTI_DRIVER        = 0x00000002;
const DISPLAY_DEVICE_PRIMARY_DEVICE      = 0x00000004;
const DISPLAY_DEVICE_MIRRORING_DRIVER    = 0x00000008;
const DISPLAY_DEVICE_VGA_COMPATIBLE      = 0x00000010;
const DISPLAY_DEVICE_REMOVABLE           = 0x00000020;
const DISPLAY_DEVICE_MODESPRUNED         = 0x08000000;

static if (_WIN32_WINNT >= 0x0500) {
    const GGI_MARK_NONEXISTING_GLYPHS = 1;
}

struct ABC {
    int abcA;
    UINT abcB;
    int abcC;
};

alias ABC* LPABC;
struct ABCFLOAT {
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
}
alias ABCFLOAT* LPABCFLOAT;

struct BITMAP {
    LONG	bmType;
    LONG	bmWidth;
    LONG	bmHeight;
    LONG	bmWidthBytes;
    WORD	bmPlanes;
    WORD	bmBitsPixel;
    LPVOID	bmBits;
}
alias BITMAP* PBITMAP;
alias BITMAP* LPBITMAP;

struct BITMAPCOREHEADER {
    DWORD	bcSize;
    WORD	bcWidth;
    WORD	bcHeight;
    WORD	bcPlanes;
    WORD	bcBitCount;
}
alias BITMAPCOREHEADER* PBITMAPCOREHEADER;
alias BITMAPCOREHEADER* LPBITMAPCOREHEADER;

align(1):
struct RGBTRIPLE {
    BYTE rgbtBlue;
    BYTE rgbtGreen;
    BYTE rgbtRed;
}
alias RGBTRIPLE* LPRGBTRIPLE;

align(2):
struct BITMAPFILEHEADER {
    WORD	bfType;
    DWORD	bfSize;
    WORD	bfReserved1;
    WORD	bfReserved2;
    DWORD	bfOffBits;
}
alias BITMAPFILEHEADER* LPBITMAPFILEHEADER;
alias BITMAPFILEHEADER* PBITMAPFILEHEADER;

align:

struct BITMAPCOREINFO {
    BITMAPCOREHEADER	bmciHeader;
    RGBTRIPLE	bmciColors[1];
};
alias  BITMAPCOREINFO* LPBITMAPCOREINFO;
alias  BITMAPCOREINFO* PBITMAPCOREINFO;

struct BITMAPINFOHEADER {
    DWORD	biSize;
    LONG	biWidth;
    LONG	biHeight;
    WORD	biPlanes;
    WORD	biBitCount;
    DWORD	biCompression;
    DWORD	biSizeImage;
    LONG	biXPelsPerMeter;
    LONG	biYPelsPerMeter;
    DWORD	biClrUsed;
    DWORD	biClrImportant;
};

alias BITMAPINFOHEADER* LPBITMAPINFOHEADER;
alias BITMAPINFOHEADER* PBITMAPINFOHEADER;

struct RGBQUAD {
    BYTE	rgbBlue;
    BYTE	rgbGreen;
    BYTE	rgbRed;
    BYTE	rgbReserved;
};
alias RGBQUAD* LPRGBQUAD;

struct BITMAPINFO {
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
};
alias BITMAPINFO* LPBITMAPINFO;
alias BITMAPINFO* PBITMAPINFO;

alias int FXPT16DOT16;
alias int* LPFXPT16DOT16;
alias int FXPT2DOT30;
alias int* LPFXPT2DOT30;

struct CIEXYZ {
    FXPT2DOT30 ciexyzX;
    FXPT2DOT30 ciexyzY;
    FXPT2DOT30 ciexyzZ;
}
alias CIEXYZ* LPCIEXYZ;

struct CIEXYZTRIPLE {
    CIEXYZ ciexyzRed;
    CIEXYZ ciexyzGreen;
    CIEXYZ ciexyzBlue;
}
alias CIEXYZTRIPLE* LPCIEXYZTRIPLE;

struct BITMAPV4HEADER {
    DWORD	bV4Size;
    LONG	bV4Width;
    LONG	bV4Height;
    WORD	bV4Planes;
    WORD	bV4BitCount;
    DWORD	bV4V4Compression;
    DWORD	bV4SizeImage;
    LONG	bV4XPelsPerMeter;
    LONG	bV4YPelsPerMeter;
    DWORD	bV4ClrUsed;
    DWORD	bV4ClrImportant;
    DWORD	bV4RedMask;
    DWORD	bV4GreenMask;
    DWORD	bV4BlueMask;
    DWORD	bV4AlphaMask;
    DWORD	bV4CSType;
    CIEXYZTRIPLE bV4Endpoints;
    DWORD	bV4GammaRed;
    DWORD	bV4GammaGreen;
    DWORD	bV4GammaBlue;
}
alias BITMAPV4HEADER* LPBITMAPV4HEADER;
alias BITMAPV4HEADER* PBITMAPV4HEADER;

struct FONTSIGNATURE {
    DWORD	fsUsb[4];
    DWORD	fsCsb[2];
}
alias FONTSIGNATURE* LPFONTSIGNATURE;

struct CHARSETINFO {
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
}
alias CHARSETINFO* LPCHARSETINFO;

struct  COLORADJUSTMENT {
    WORD	caSize;
    WORD	caFlags;
    WORD	caIlluminantIndex;
    WORD	caRedGamma;
    WORD	caGreenGamma;
    WORD	caBlueGamma;
    WORD	caReferenceBlack;
    WORD	caReferenceWhite;
    SHORT	caContrast;
    SHORT	caBrightness;
    SHORT	caColorfulness;
    SHORT	caRedGreenTint;
}
alias COLORADJUSTMENT* LPCOLORADJUSTMENT;

struct DEVMODEA {
    BYTE   dmDeviceName[CCHDEVICENAME];
    WORD   dmSpecVersion;
    WORD   dmDriverVersion;
    WORD   dmSize;
    WORD   dmDriverExtra;
    DWORD  dmFields;
    union {
        struct {
            short dmOrientation;
            short dmPaperSize;
            short dmPaperLength;
            short dmPaperWidth;
            short dmScale;
            short dmCopies;
            short dmDefaultSource;
            short dmPrintQuality;
        }
        POINTL dmPosition;
        DWORD  dmDisplayOrientation;
        DWORD  dmDisplayFixedOutput;
    }
    short  dmColor;
    short  dmDuplex;
    short  dmYResolution;
    short  dmTTOption;
    short  dmCollate;
    BYTE   dmFormName[CCHFORMNAME];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
        DWORD  dmDisplayFlags;
        DWORD  dmNup;
    }
    DWORD  dmDisplayFrequency;
    static if (WINVER >= 0x0400) {
        DWORD  dmICMMethod;
        DWORD  dmICMIntent;
        DWORD  dmMediaType;
        DWORD  dmDitherType;
        DWORD  dmReserved1;
        DWORD  dmReserved2;
        static if ((WINVER >= 0x0500) || (_WIN32_WINNT >= 0x0400)) {
            DWORD  dmPanningWidth;
            DWORD  dmPanningHeight;
        }
    }
}
alias DEVMODEA* LPDEVMODEA;
alias DEVMODEA* PDEVMODEA;

struct DEVMODEW {
    WCHAR   dmDeviceName[CCHDEVICENAME];
    WORD   dmSpecVersion;
    WORD   dmDriverVersion;
    WORD   dmSize;
    WORD   dmDriverExtra;
    DWORD  dmFields;
    union {
        struct {
            short dmOrientation;
            short dmPaperSize;
            short dmPaperLength;
            short dmPaperWidth;
            short dmScale;
            short dmCopies;
            short dmDefaultSource;
            short dmPrintQuality;
        }
        POINTL dmPosition;
        DWORD  dmDisplayOrientation;
        DWORD  dmDisplayFixedOutput;
    }

    short  dmColor;
    short  dmDuplex;
    short  dmYResolution;
    short  dmTTOption;
    short  dmCollate;
    WCHAR  dmFormName[CCHFORMNAME];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
        DWORD  dmDisplayFlags;
        DWORD  dmNup;
    }
    DWORD  dmDisplayFrequency;
    static if (WINVER >= 0x0400) {
        DWORD  dmICMMethod;
        DWORD  dmICMIntent;
        DWORD  dmMediaType;
        DWORD  dmDitherType;
        DWORD  dmReserved1;
        DWORD  dmReserved2;
        static if ((WINVER >= 0x0500) || (_WIN32_WINNT >= 0x0400)) {
            DWORD  dmPanningWidth;
            DWORD  dmPanningHeight;
        }
    }
}
alias DEVMODEW* LPDEVMODEW;
alias DEVMODEW* PDEVMODEW;

struct DIBSECTION {
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD dsBitfields[3];
    HANDLE dshSection;
    DWORD dsOffset;
}

struct DOCINFOA {
    int cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;
    LPCSTR lpszDatatype;
    DWORD fwType;
}
alias DOCINFOA* LPDOCINFOA;

struct DOCINFOW {
    int cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;
    LPCWSTR lpszDatatype;
    DWORD fwType;
}
alias DOCINFOW* LPDOCINFOW;


struct PANOSE {
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
}

struct LOGFONTA {
    LONG	lfHeight;
    LONG	lfWidth;
    LONG	lfEscapement;
    LONG	lfOrientation;
    LONG	lfWeight;
    BYTE	lfItalic;
    BYTE	lfUnderline;
    BYTE	lfStrikeOut;
    BYTE	lfCharSet;
    BYTE	lfOutPrecision;
    BYTE	lfClipPrecision;
    BYTE	lfQuality;
    BYTE	lfPitchAndFamily;
    CHAR	lfFaceName[LF_FACESIZE];
}
alias LOGFONTA* PLOGFONTA;
alias LOGFONTA* LPLOGFONTA;

struct LOGFONTW {
    LONG	lfHeight;
    LONG	lfWidth;
    LONG	lfEscapement;
    LONG	lfOrientation;
    LONG	lfWeight;
    BYTE	lfItalic;
    BYTE	lfUnderline;
    BYTE	lfStrikeOut;
    BYTE	lfCharSet;
    BYTE	lfOutPrecision;
    BYTE	lfClipPrecision;
    BYTE	lfQuality;
    BYTE	lfPitchAndFamily;
    WCHAR	lfFaceName[LF_FACESIZE];
}
alias LOGFONTW* PLOGFONTW;
alias LOGFONTW* LPLOGFONTW;

struct EXTLOGFONTA {
    LOGFONTA	elfLogFont;
    BYTE	elfFullName[LF_FULLFACESIZE];
    BYTE	elfStyle[LF_FACESIZE];
    DWORD	elfVersion;
    DWORD	elfStyleSize;
    DWORD	elfMatch;
    DWORD	elfReserved;
    BYTE	elfVendorId[ELF_VENDOR_SIZE];
    DWORD	elfCulture;
    PANOSE	elfPanose;
}
alias EXTLOGFONTA* PEXTLOGFONTA;
alias EXTLOGFONTA* LPEXTLOGFONTA;

struct EXTLOGFONTW {
    LOGFONTW	elfLogFont;
    WCHAR	elfFullName[LF_FULLFACESIZE];
    WCHAR	elfStyle[LF_FACESIZE];
    DWORD	elfVersion;
    DWORD	elfStyleSize;
    DWORD	elfMatch;
    DWORD	elfReserved;
    BYTE	elfVendorId[ELF_VENDOR_SIZE];
    DWORD	elfCulture;
    PANOSE	elfPanose;
}
alias EXTLOGFONTW* PEXTLOGFONTW;
alias EXTLOGFONTW* LPEXTLOGFONTW;

struct LOGPEN {
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
}
alias LOGPEN* PLOGPEN;
alias LOGPEN* LPLOGPEN;

// ---------------------- EMR ------------

struct EMR {
    DWORD iType;
    DWORD nSize;
}
alias EMR* PEMR;

struct EMRANGLEARC {
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
}
alias EMRANGLEARC* PEMRANGLEARC;

struct EMRARC {
    EMR emr;
    RECTL rclBox;
    POINTL ptlStart;
    POINTL ptlEnd;
}
alias EMRARC* PEMRARC;
typedef EMRARC EMRARCTO;
alias EMRARC* PEMRARCTO;
typedef EMRARC EMRCHORD;
alias EMRARC* PEMRCHORD;
typedef EMRARC EMRPIE;
alias EMRARC* PEMRPIE;

struct  XFORM {
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
}
alias XFORM* PXFORM;
alias XFORM* LPXFORM;

struct EMRBITBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
}
alias EMRBITBLT* PEMRBITBLT;

struct LOGBRUSH {
    UINT lbStyle;
    COLORREF lbColor;
    LONG lbHatch;
}
alias LOGBRUSH* PLOGBRUSH;
alias LOGBRUSH* LPLOGBRUSH;
typedef LOGBRUSH PATTERN;
alias LOGBRUSH* PPATTERN;
alias LOGBRUSH* LPPATTERN;

struct EMRCREATEBRUSHINDIRECT {
    EMR emr;
    DWORD ihBrush;
    LOGBRUSH lb;
}
alias EMRCREATEBRUSHINDIRECT* PEMRCREATEBRUSHINDIRECT;

alias LONG LCSCSTYPE;
alias LONG LCSGAMUTMATCH;

struct LOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR lcsFilename[MAX_PATH];
}
alias LOGCOLORSPACEA* LPLOGCOLORSPACEA;
struct LOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR lcsFilename[MAX_PATH];
}
alias LOGCOLORSPACEW* LPLOGCOLORSPACEW;

struct EMRCREATECOLORSPACE {
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEW lcs;
}
alias EMRCREATECOLORSPACE* PEMRCREATECOLORSPACE;

struct EMRCREATEDIBPATTERNBRUSHPT {
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
}
alias EMRCREATEDIBPATTERNBRUSHPT* PEMRCREATEDIBPATTERNBRUSHPT;

struct EMRCREATEMONOBRUSH {
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
}
alias EMRCREATEMONOBRUSH* PEMRCREATEMONOBRUSH;

struct PALETTEENTRY {
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
}
alias PALETTEENTRY* LPPALETTEENTRY, PPALETTEENTRY;

struct LOGPALETTE {
    WORD palVersion;
    WORD palNumEntries;
    PALETTEENTRY palPalEntry[1];
}
alias LOGPALETTE* PLOGPALETTE, LPLOGPALETTE;

struct EMRCREATEPALETTE {
    EMR emr;
    DWORD ihPal;
    LOGPALETTE lgpl;
}
alias EMRCREATEPALETTE* PEMRCREATEPALETTE;

struct EMRCREATEPEN {
    EMR emr;
    DWORD ihPen;
    LOGPEN lopn;
}
alias EMRCREATEPEN* PEMRCREATEPEN;

struct EMRELLIPSE {
    EMR emr;
    RECTL rclBox;
}
alias EMRELLIPSE* PEMRELLIPSE;
typedef EMRELLIPSE EMRRECTANGLE;
alias EMRRECTANGLE* PEMRRECTANGLE;

struct EMREOF {
    EMR emr;
    DWORD nPalEntries;
    DWORD offPalEntries;
    DWORD nSizeLast;
}
alias EMREOF* PEMREOF;

struct EMREXCLUDECLIPRECT {
    EMR emr;
    RECTL rclClip;
}
alias EMREXCLUDECLIPRECT* PEMREXCLUDECLIPRECT;
typedef EMREXCLUDECLIPRECT EMRINTERSECTCLIPRECT;
alias EMRINTERSECTCLIPRECT* PEMRINTERSECTCLIPRECT;

struct EMREXTCREATEFONTINDIRECTW {
    EMR emr;
    DWORD ihFont;
    EXTLOGFONTW elfw;
}
alias EMREXTCREATEFONTINDIRECTW* PEMREXTCREATEFONTINDIRECTW;

struct EXTLOGPEN {
    UINT elpPenStyle;
    UINT elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    LONG elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
}
alias EXTLOGPEN* PEXTLOGPEN;
alias EXTLOGPEN* LPEXTLOGPEN;

struct EMREXTCREATEPEN {
    EMR emr;
    DWORD ihPen;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
    EXTLOGPEN elp;
}
alias EMREXTCREATEPEN* PEMREXTCREATEPEN;

struct EMREXTFLOODFILL {
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
}
alias EMREXTFLOODFILL* PEMREXTFLOODFILL;

struct EMREXTSELECTCLIPRGN {
    EMR emr;
    DWORD cbRgnData;
    DWORD iMode;
    BYTE RgnData[1];
}
alias EMREXTSELECTCLIPRGN* PEMREXTSELECTCLIPRGN;

struct EMRTEXT {
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString;
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx;
}
alias EMRTEXT* PEMRTEXT;

struct EMREXTTEXTOUTA {
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    EMRTEXT emrtext;
}
alias EMREXTTEXTOUTA* PEMREXTTEXTOUTA;
alias EMREXTTEXTOUTA EMREXTTEXTOUTW;
alias EMREXTTEXTOUTA* PEMREXTTEXTOUTW;

struct EMRFILLPATH {
    EMR emr;
    RECTL rclBounds;
}
alias EMRFILLPATH* PEMRFILLPATH;
typedef EMRFILLPATH EMRSTROKEANDFILLPATH;
alias EMRSTROKEANDFILLPATH* PEMRSTROKEANDFILLPATH;
typedef EMRFILLPATH EMRSTROKEPATH;
alias EMRSTROKEPATH* PEMRSTROKEPATH;

struct EMRFILLRGN {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    BYTE RgnData[1];
}
alias EMRFILLRGN* PEMRFILLRGN;

struct EMRFORMAT {
    DWORD dSignature;
    DWORD nVersion;
    DWORD cbData;
    DWORD offData;
}

struct EMRFRAMERGN {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    SIZEL szlStroke;
    BYTE RgnData[1];
}
alias EMRFRAMERGN* PEMRFRAMERGN;

struct EMRGDICOMMENT {
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
}
alias EMRGDICOMMENT* PEMRGDICOMMENT;

struct EMRINVERTRGN {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    BYTE RgnData[1];
}
alias EMRINVERTRGN* PEMRINVERTRGN;
typedef EMRINVERTRGN EMRPAINTRGN;
alias EMRPAINTRGN* PEMRPAINTRGN;

struct EMRLINETO {
    EMR emr;
    POINTL ptl;
}
alias EMRLINETO* PEMRLINETO;
typedef EMRLINETO EMRMOVETOEX;
alias EMRMOVETOEX* PEMRMOVETOEX;

struct EMRMASKBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
}
alias EMRMASKBLT* PEMRMASKBLT;

struct EMRMODIFYWORLDTRANSFORM {
    EMR emr;
    XFORM xform;
    DWORD iMode;
}
alias EMRMODIFYWORLDTRANSFORM* PEMRMODIFYWORLDTRANSFORM;

struct EMROFFSETCLIPRGN {
    EMR emr;
    POINTL ptlOffset;
}
alias EMROFFSETCLIPRGN* PEMROFFSETCLIPRGN;

struct EMRPLGBLT {
    EMR emr;
    RECTL rclBounds;
    POINTL aptlDest[3];
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
}
alias EMRPLGBLT* PEMRPLGBLT;

struct EMRPOLYDRAW {
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
    BYTE abTypes[1];
}
alias EMRPOLYDRAW* PEMRPOLYDRAW;

struct EMRPOLYDRAW16 {
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
    BYTE abTypes[1];
}
alias EMRPOLYDRAW16* PEMRPOLYDRAW16;

struct EMRPOLYLINE {
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
}
alias EMRPOLYLINE* PEMRPOLYLINE;
typedef EMRPOLYLINE EMRPOLYBEZIER;
alias EMRPOLYBEZIER* PEMRPOLYBEZIER;
typedef EMRPOLYLINE EMRPOLYGON;
alias EMRPOLYGON* PEMRPOLYGON;
typedef EMRPOLYLINE EMRPOLYBEZIERTO;
alias EMRPOLYBEZIERTO* PEMRPOLYBEZIERTO;
typedef EMRPOLYLINE EMRPOLYLINETO;
alias EMRPOLYLINETO* PEMRPOLYLINETO;

struct EMRPOLYLINE16 {
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTL apts[1];
}
alias EMRPOLYLINE16* PEMRPOLYLINE16;
typedef EMRPOLYLINE16 EMRPOLYBEZIER16;
alias EMRPOLYBEZIER16* PEMRPOLYBEZIER16;
typedef EMRPOLYLINE16 EMRPOLYGON16;
alias EMRPOLYGON16* PEMRPOLYGON16;
typedef EMRPOLYLINE16 EMRPOLYBEZIERTO16;
alias EMRPOLYBEZIERTO16* PEMRPOLYBEZIERTO16;
typedef EMRPOLYLINE16 EMRPOLYLINETO16;
alias EMRPOLYLINETO16* PEMRPOLYLINETO16;

struct EMRPOLYPOLYLINE {
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cptl;
    DWORD aPolyCounts[1];
    POINTL aptl[1];
}
alias EMRPOLYPOLYLINE* PEMRPOLYPOLYLINE;
typedef EMRPOLYPOLYLINE EMRPOLYPOLYGON;
alias EMRPOLYPOLYGON* PEMRPOLYPOLYGON;

struct EMRPOLYPOLYLINE16 {
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cpts;
    DWORD aPolyCounts[1];
    POINTS apts[1];
}
alias EMRPOLYPOLYLINE16* PEMRPOLYPOLYLINE16;
typedef EMRPOLYPOLYLINE16 EMRPOLYPOLYGON16;
alias EMRPOLYPOLYGON16* PEMRPOLYPOLYGON16;

struct EMRPOLYTEXTOUTA {
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    LONG cStrings;
    EMRTEXT aemrtext[1];
}
alias EMRPOLYTEXTOUTA* PEMRPOLYTEXTOUTA;
alias EMRPOLYTEXTOUTA EMRPOLYTEXTOUTW;
alias EMRPOLYTEXTOUTW* PEMRPOLYTEXTOUTW;

struct EMRRESIZEPALETTE {
    EMR emr;
    DWORD ihPal;
    DWORD cEntries;
}
alias EMRRESIZEPALETTE* PEMRRESIZEPALETTE;

struct EMRRESTOREDC {
    EMR emr;
    LONG iRelative;
}
alias EMRRESTOREDC* PEMRRESTOREDC;

struct EMRROUNDRECT {
    EMR emr;
    RECTL rclBox;
    SIZEL szlCorner;
}
alias EMRROUNDRECT* PEMRROUNDRECT;

struct EMRSCALEVIEWPORTEXTEX {
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
}
alias EMRSCALEVIEWPORTEXTEX* PEMRSCALEVIEWPORTEXTEX;
typedef EMRSCALEVIEWPORTEXTEX EMRSCALEWINDOWEXTEX;
alias EMRSCALEWINDOWEXTEX* PEMRSCALEWINDOWEXTEX;

struct EMRSELECTCOLORSPACE {
    EMR emr;
    DWORD ihCS;
}
alias EMRSELECTCOLORSPACE* PEMRSELECTCOLORSPACE;
typedef EMRSELECTCOLORSPACE EMRDELETECOLORSPACE;
alias EMRDELETECOLORSPACE* PEMRDELETECOLORSPACE;

struct EMRSELECTOBJECT {
    EMR emr;
    DWORD ihObject;
}
alias EMRSELECTOBJECT* PEMRSELECTOBJECT;
typedef EMRSELECTOBJECT EMRDELETEOBJECT;
alias EMRDELETEOBJECT* PEMRDELETEOBJECT;

struct EMRSELECTPALETTE {
    EMR emr;
    DWORD ihPal;
}
alias EMRSELECTPALETTE* PEMRSELECTPALETTE;

struct EMRSETARCDIRECTION {
    EMR emr;
    DWORD iArcDirection;
}
alias EMRSETARCDIRECTION* PEMRSETARCDIRECTION;

struct EMRSETTEXTCOLOR {
    EMR emr;
    COLORREF crColor;
}
alias EMRSETTEXTCOLOR* PEMRSETTEXTCOLOR;
typedef EMRSETTEXTCOLOR EMRSETBKCOLOR;
alias EMRSETBKCOLOR* PEMRSETBKCOLOR;

struct EMRSETCOLORADJUSTMENT {
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
}
alias EMRSETCOLORADJUSTMENT* PEMRSETCOLORADJUSTMENT;

struct EMRSETDIBITSTODEVICE {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD iStartScan;
    DWORD cScans;
}
alias EMRSETDIBITSTODEVICE* PEMRSETDIBITSTODEVICE;

struct EMRSETMAPPERFLAGS {
    EMR emr;
    DWORD dwFlags;
}
alias EMRSETMAPPERFLAGS* PEMRSETMAPPERFLAGS;

struct EMRSETMITERLIMIT {
    EMR emr;
    FLOAT eMiterLimit;
}
alias EMRSETMITERLIMIT* PEMRSETMITERLIMIT;

struct EMRSETPALETTEENTRIES {
    EMR emr;
    DWORD ihPal;
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY aPalEntries[1];
}
alias EMRSETPALETTEENTRIES* PEMRSETPALETTEENTRIES;

struct EMRSETPIXELV {
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
}
alias EMRSETPIXELV* PEMRSETPIXELV;

struct EMRSETVIEWPORTEXTEX {
    EMR emr;
    SIZEL szlExtent;
}
alias EMRSETVIEWPORTEXTEX* PEMRSETVIEWPORTEXTEX;
typedef EMRSETVIEWPORTEXTEX EMRSETWINDOWEXTEX;
alias EMRSETWINDOWEXTEX* PEMRSETWINDOWEXTEX;

struct EMRSETVIEWPORTORGEX {
    EMR emr;
    POINTL ptlOrigin;
}
alias EMRSETVIEWPORTORGEX* PEMRSETVIEWPORTORGEX;
typedef EMRSETVIEWPORTORGEX EMRSETWINDOWORGEX;
alias EMRSETWINDOWORGEX* PEMRSETWINDOWORGEX;
typedef EMRSETVIEWPORTORGEX EMRSETBRUSHORGEX;
alias EMRSETBRUSHORGEX* PEMRSETBRUSHORGEX;

struct EMRSETWORLDTRANSFORM {
    EMR emr;
    XFORM xform;
}
alias EMRSETWORLDTRANSFORM* PEMRSETWORLDTRANSFORM;

struct EMRSTRETCHBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
}
alias EMRSTRETCHBLT* PEMRSTRETCHBLT;

struct EMRSTRETCHDIBITS {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
}
alias EMRSTRETCHDIBITS* PEMRSTRETCHDIBITS;

struct EMRABORTPATH {
    EMR emr;
}
alias EMRABORTPATH* PEMRABORTPATH;
alias EMRABORTPATH EMRBEGINPATH;
alias EMRABORTPATH* PEMRBEGINPATH;
alias EMRABORTPATH EMRENDPATH;
alias EMRABORTPATH* PEMRENDPATH;
alias EMRABORTPATH EMRCLOSEFIGURE;
alias EMRABORTPATH* PEMRCLOSEFIGURE;
alias EMRABORTPATH EMRFLATTENPATH;
alias EMRABORTPATH* PEMRFLATTENPATH;
alias EMRABORTPATH EMRWIDENPATH;
alias EMRABORTPATH* PEMRWIDENPATH;
alias EMRABORTPATH EMRSETMETARGN;
alias EMRABORTPATH* PEMRSETMETARGN;
alias EMRABORTPATH EMRSAVEDC;
alias EMRABORTPATH* PEMRSAVEDC;
alias EMRABORTPATH EMRREALIZEPALETTE;
alias EMRABORTPATH* PEMRREALIZEPALETTE;

struct EMRSELECTCLIPPATH {
    EMR emr;
    DWORD iMode;
}
alias EMRSELECTCLIPPATH* PEMRSELECTCLIPPATH;
alias EMRSELECTCLIPPATH EMRSETBKMODE;
alias EMRSELECTCLIPPATH* PEMRSETBKMODE;
alias EMRSELECTCLIPPATH EMRSETMAPMODE;
alias EMRSELECTCLIPPATH* PEMRSETMAPMODE;
alias EMRSELECTCLIPPATH EMRSETPOLYFILLMODE;
alias EMRSELECTCLIPPATH* PEMRSETPOLYFILLMODE;
alias EMRSELECTCLIPPATH EMRSETROP2;
alias EMRSELECTCLIPPATH* PEMRSETROP2;
alias EMRSELECTCLIPPATH EMRSETSTRETCHBLTMODE;
alias EMRSELECTCLIPPATH* PEMRSETSTRETCHBLTMODE;
alias EMRSELECTCLIPPATH EMRSETTEXTALIGN;
alias EMRSELECTCLIPPATH* PEMRSETTEXTALIGN;
alias EMRSELECTCLIPPATH EMRENABLEICM;
alias EMRSELECTCLIPPATH* PEMRENABLEICM;

align(2):
struct METAHEADER {
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
}
alias METAHEADER* PMETAHEADER;
alias METAHEADER* LPMETAHEADER;

align:

struct ENHMETAHEADER {
    DWORD iType;
    DWORD nSize;
    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD nHandles;
    WORD sReserved;
    DWORD nDescription;
    DWORD offDescription;
    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;
    static if (WINVER >= 0x0400) {
        DWORD cbPixelFormat;
        DWORD offPixelFormat;
        DWORD bOpenGL;
    }
    static if (WINVER >= 0x0500) {
        SIZEL szlMicrometers;
    }
}
alias ENHMETAHEADER* LPENHMETAHEADER;

struct METARECORD {
    DWORD rdSize;
    WORD rdFunction;
    WORD rdParm[1];
}
alias METARECORD* PMETARECORD;
alias METARECORD* LPMETARECORD;

struct ENHMETARECORD {
    DWORD iType;
    DWORD nSize;
    DWORD dParm[1];
}
alias ENHMETARECORD* LPENHMETARECORD;

struct HANDLETABLE {
    HGDIOBJ objectHandle[1];
}
alias HANDLETABLE* LPHANDLETABLE;

struct TEXTMETRICA {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
}
alias TEXTMETRICA* PTEXTMETRICA;
alias TEXTMETRICA* LPTEXTMETRICA;

struct TEXTMETRICW {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
}
alias TEXTMETRICW* PTEXTMETRICW;
alias TEXTMETRICW* LPTEXTMETRICW;

struct RGNDATAHEADER {
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
}

struct RGNDATA {
    RGNDATAHEADER rdh;
    char Buffer[1];
}
alias RGNDATA* PRGNDATA, LPRGNDATA;

/* for GetRandomRgn */
const SYSRGN=4;
struct GCP_RESULTSA {
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT* lpOrder;
    INT* lpDx;
    INT* lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    UINT nMaxFit;
}
alias GCP_RESULTSA* LPGCP_RESULTSA;

struct GCP_RESULTSW {
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT* lpOrder;
    INT* lpDx;
    INT* lpCaretPos;
    LPWSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    UINT nMaxFit;
}
alias GCP_RESULTSW* LPGCP_RESULTSW;

struct GLYPHMETRICS {
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    short gmCellIncX;
    short gmCellIncY;
}
alias GLYPHMETRICS* LPGLYPHMETRICS;

static if (_WIN32_WINNT >= 0x0500) {
    struct WCRANGE {
        WCHAR wcLow;
        USHORT cGlyphs;
    }
    alias WCRANGE* PWCRANGE;
    alias WCRANGE* LPWCRANGE;

    struct GLYPHSET {
        DWORD cbThis;
        DWORD flAccel;
        DWORD cGlyphsSupported;
        DWORD cRanges;
        WCRANGE ranges[1];
    }
    alias GLYPHSET* PGLYPHSET;
    alias GLYPHSET* LPGLYPHSET;
}

struct KERNINGPAIR {
    WORD wFirst;
    WORD wSecond;
    int iKernAmount;
}
alias KERNINGPAIR* LPKERNINGPAIR;

struct FIXED {
    WORD fract;
    short value;
}

struct MAT2 {
    FIXED eM11;
    FIXED eM12;
    FIXED eM21;
    FIXED eM22;
}
alias MAT2* LPMAT2;

struct OUTLINETEXTMETRICA {
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
}
alias OUTLINETEXTMETRICA* POUTLINETEXTMETRICA, LPOUTLINETEXTMETRICA;

struct OUTLINETEXTMETRICW {
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
}
alias OUTLINETEXTMETRICW* POUTLINETEXTMETRICW, LPOUTLINETEXTMETRICW;

struct RASTERIZER_STATUS {
    short nSize;
    short wFlags;
    short nLanguageID;
}
alias RASTERIZER_STATUS* LPRASTERIZER_STATUS;

struct POLYTEXTA {
    int x;
    int y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int* pdx;
}
alias POLYTEXTA* PPOLYTEXTA, LPPOLYTEXTA;

struct POLYTEXTW {
    int x;
    int y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int* pdx;
}
alias POLYTEXTW* PPOLYTEXTW, LPPOLYTEXTW;

struct PIXELFORMATDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
}
alias PIXELFORMATDESCRIPTOR* PPIXELFORMATDESCRIPTOR, LPPIXELFORMATDESCRIPTOR;

struct METAFILEPICT {
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
}
alias METAFILEPICT* LPMETAFILEPICT;

struct LOCALESIGNATURE {
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
}
alias LOCALESIGNATURE* PLOCALESIGNATURE, LPLOCALESIGNATURE;
alias LONG LCSTYPE;

align(4):
struct NEWTEXTMETRICA {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
}
alias NEWTEXTMETRICA* PNEWTEXTMETRICA, LPNEWTEXTMETRICA;

struct NEWTEXTMETRICW {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
}
alias NEWTEXTMETRICW* PNEWTEXTMETRICW, LPNEWTEXTMETRICW;

align:
struct NEWTEXTMETRICEXA {
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
}

struct NEWTEXTMETRICEXW {
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
}

struct PELARRAY {
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
}
alias PELARRAY* PPELARRAY, LPPELARRAY;

struct ENUMLOGFONTA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[LF_FULLFACESIZE];
    BYTE elfStyle[LF_FACESIZE];
}
alias ENUMLOGFONTA* LPENUMLOGFONTA;

struct ENUMLOGFONTW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[LF_FULLFACESIZE];
    WCHAR elfStyle[LF_FACESIZE];
}
alias ENUMLOGFONTW* LPENUMLOGFONTW;

struct ENUMLOGFONTEXA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[LF_FULLFACESIZE];
    BYTE elfStyle[LF_FACESIZE];
    BYTE elfScript[LF_FACESIZE];
}
alias ENUMLOGFONTEXA* LPENUMLOGFONTEXA;

struct ENUMLOGFONTEXW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[LF_FULLFACESIZE];
    WCHAR elfStyle[LF_FACESIZE];
    WCHAR elfScript[LF_FACESIZE];
}
alias ENUMLOGFONTEXW* LPENUMLOGFONTEXW;

struct POINTFX {
    FIXED x;
    FIXED y;
}
alias POINTFX* LPPOINTFX;

struct TTPOLYCURVE {
    WORD wType;
    WORD cpfx;
    POINTFX apfx[1];
}
alias TTPOLYCURVE* LPTTPOLYCURVE;

struct TTPOLYGONHEADER {
    DWORD cb;
    DWORD dwType;
    POINTFX pfxStart;
}
alias TTPOLYGONHEADER* LPTTPOLYGONHEADER;

struct POINTFLOAT {
    FLOAT x;
    FLOAT y;
}
alias POINTFLOAT* PPOINTFLOAT;

struct GLYPHMETRICSFLOAT {
    FLOAT gmfBlackBoxX;
    FLOAT gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    FLOAT gmfCellIncX;
    FLOAT gmfCellIncY;
}
alias GLYPHMETRICSFLOAT* PGLYPHMETRICSFLOAT, LPGLYPHMETRICSFLOAT;

struct LAYERPLANEDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerPlane;
    BYTE bReserved;
    COLORREF crTransparent;
}
alias LAYERPLANEDESCRIPTOR* PLAYERPLANEDESCRIPTOR, LPLAYERPLANEDESCRIPTOR;

struct BLENDFUNCTION {
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
}
alias BLENDFUNCTION* PBLENDFUNCTION, LPBLENDFUNCTION;

const MM_MAX_NUMAXES = 16;

struct DESIGNVECTOR {
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG dvValues[MM_MAX_NUMAXES];
}
alias DESIGNVECTOR* PDESIGNVECTOR;

static if (_WIN32_WINNT >= 0x0500) {
    struct ENUMLOGFONTEXDVA {
        ENUMLOGFONTEXA elfEnumLogfontEx;
        DESIGNVECTOR elfDesignVector;
    }
    alias ENUMLOGFONTEXDVA* PENUMLOGFONTEXDVA, LPENUMLOGFONTEXDVA;

    struct ENUMLOGFONTEXDVW {
        ENUMLOGFONTEXW elfEnumLogfontEx;
        DESIGNVECTOR elfDesignVector;
    }
    alias ENUMLOGFONTEXDVW* PENUMLOGFONTEXDVW, LPENUMLOGFONTEXDVW;
} /* _WIN32_WINNT >= 0x0500 */

alias USHORT COLOR16;
struct TRIVERTEX {
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}
alias TRIVERTEX* PTRIVERTEX, LPTRIVERTEX;

struct GRADIENT_TRIANGLE {
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
}
alias GRADIENT_TRIANGLE* PGRADIENT_TRIANGLE, LPGRADIENT_TRIANGLE;

struct GRADIENT_RECT {
    ULONG UpperLeft;
    ULONG LowerRight;
}
alias GRADIENT_RECT* PGRADIENT_RECT, LPGRADIENT_RECT;

struct DISPLAY_DEVICEA {
    DWORD cb;
    CHAR DeviceName[32];
    CHAR DeviceString[128];
    DWORD StateFlags;
    CHAR DeviceID[128];
    CHAR DeviceKey[128];
}
alias DISPLAY_DEVICEA* PDISPLAY_DEVICEA, LPDISPLAY_DEVICEA;

struct DISPLAY_DEVICEW {
    DWORD cb;
    WCHAR DeviceName[32];
    WCHAR DeviceString[128];
    DWORD StateFlags;
    WCHAR DeviceID[128];
    WCHAR DeviceKey[128];
}
alias DISPLAY_DEVICEW* PDISPLAY_DEVICEW, LPDISPLAY_DEVICEW;

// ---------
// Callbacks

alias BOOL function (HDC, int) ABORTPROC;
alias int function (HDC, HANDLETABLE*, METARECORD*, int, LPARAM) MFENUMPROC;
alias int function (HDC, HANDLETABLE*, ENHMETARECORD*, int, LPARAM) ENHMFENUMPROC;
alias int function ( LOGFONTA*, TEXTMETRICA*, DWORD, LPARAM) FONTENUMPROCA, OLDFONTENUMPROCA;
alias int function ( LOGFONTW*, TEXTMETRICW*, DWORD, LPARAM) FONTENUMPROCW, OLDFONTENUMPROCW;
alias int function (LPSTR, LPARAM) ICMENUMPROCA;
alias int function (LPWSTR, LPARAM) ICMENUMPROCW;
alias void function (LPVOID, LPARAM) GOBJENUMPROC;
alias void function (int, int, LPARAM) LINEDDAPROC;
alias UINT function (HWND, HMODULE, LPDEVMODEA, LPSTR, LPSTR, LPDEVMODEA, LPSTR, UINT) LPFNDEVMODE;
alias DWORD function (LPSTR, LPSTR, UINT, LPSTR, LPDEVMODEA) LPFNDEVCAPS;


// ---------
// C Macros.
// FIXME:
//MACRO #define MAKEPOINTS(l) (*((POINTS*)&(l)))

DWORD MAKEROP4(DWORD fore, DWORD back) {
    return (( back<<8)&0xFF000000)|(fore);
}

COLORREF CMYK(byte c, byte m, byte y, byte k) {
    return cast(COLORREF)(k|(y<<8)|(m<<16)|(c<<24));
}

byte GetCValue(COLORREF cmyk) {
    return cast(byte)(cmyk);
}

byte GetMValue(COLORREF cmyk) {
    return cast(byte)(cmyk>>8);
}

byte GetYValue(COLORREF cmyk) {
    return cast(byte)(cmyk>>16);
}

byte GetKValue(COLORREF cmyk) {
    return cast(byte)(cmyk>>24);
}

COLORREF RGB(byte r, byte g, byte b) {
    return cast(COLORREF)(r|(g<<8)|(b<<16));
}

byte GetRValue(COLORREF c) {
    return cast(byte)c;
}

byte GetGValue(COLORREF c) {
    return cast(byte)(c>>8);
}

byte GetBValue(COLORREF c) {
    return cast(byte)(c>>16);
}

COLORREF PALETTEINDEX(WORD i) {
    return 0x01000000|cast(COLORREF)(i);
}

COLORREF PALETTERGB(byte r, byte g, byte b) {
    return 0x02000000|RGB(r, g, b);
}

extern(Windows) {

int AbortDoc(HDC);
BOOL AbortPath(HDC);
int AddFontResourceA(LPCSTR);
int AddFontResourceW(LPCWSTR);
BOOL AngleArc(HDC, int, int, DWORD, FLOAT, FLOAT);
BOOL AnimatePalette(HPALETTE, UINT, UINT, PALETTEENTRY*);
BOOL Arc(HDC, int, int, int, int, int, int, int, int);
BOOL ArcTo(HDC, int, int, int, int, int, int, int, int);
BOOL BeginPath(HDC);
BOOL BitBlt(HDC, int, int, int, int, HDC, int, int, DWORD);
BOOL CancelDC(HDC);
BOOL CheckColorsInGamut(HDC, PVOID, PVOID, DWORD);
BOOL Chord(HDC, int, int, int, int, int, int, int, int);
int ChoosePixelFormat(HDC, PIXELFORMATDESCRIPTOR*);
HENHMETAFILE CloseEnhMetaFile(HDC);
BOOL CloseFigure(HDC);
HMETAFILE CloseMetaFile(HDC);
BOOL ColorMatchToTarget(HDC, HDC, DWORD);
int CombineRgn(HRGN, HRGN, HRGN, int);
BOOL CombineTransform(LPXFORM, XFORM*, XFORM*);
HENHMETAFILE CopyEnhMetaFileA(HENHMETAFILE, LPCSTR);
HENHMETAFILE CopyEnhMetaFileW(HENHMETAFILE, LPCWSTR);
HMETAFILE CopyMetaFileA(HMETAFILE, LPCSTR);
HMETAFILE CopyMetaFileW(HMETAFILE, LPCWSTR);
HBITMAP CreateBitmap(int, int, UINT, UINT, PCVOID);
HBITMAP CreateBitmapIndirect( BITMAP*);
HBRUSH CreateBrushIndirect( LOGBRUSH*);
HCOLORSPACE CreateColorSpaceA(LPLOGCOLORSPACEA);
HCOLORSPACE CreateColorSpaceW(LPLOGCOLORSPACEW);
HBITMAP CreateCompatibleBitmap(HDC, int, int);
HDC CreateCompatibleDC(HDC);
HDC CreateDCA(LPCSTR, LPCSTR, LPCSTR, DEVMODEA*);
HDC CreateDCW(LPCWSTR, LPCWSTR, LPCWSTR, DEVMODEW*);
HBITMAP CreateDIBitmap(HDC, BITMAPINFOHEADER*, DWORD, PCVOID, BITMAPINFO*, UINT);
HBRUSH CreateDIBPatternBrush(HGLOBAL, UINT);
HBRUSH CreateDIBPatternBrushPt(PCVOID, UINT);
HBITMAP CreateDIBSection(HDC, BITMAPINFO*, UINT, void**, HANDLE, DWORD);
HBITMAP CreateDiscardableBitmap(HDC, int, int);
HRGN CreateEllipticRgn(int, int, int, int);
HRGN CreateEllipticRgnIndirect(LPCRECT);
HDC CreateEnhMetaFileA(HDC, LPCSTR, LPCRECT, LPCSTR);
HDC CreateEnhMetaFileW(HDC, LPCWSTR, LPCRECT, LPCWSTR);
HFONT CreateFontA(int, int, int, int, int, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, LPCSTR);
HFONT CreateFontW(int, int, int, int, int, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, LPCWSTR);
HFONT CreateFontIndirectA( LOGFONTA*);
HFONT CreateFontIndirectW( LOGFONTW*);
HPALETTE CreateHalftonePalette(HDC);
HBRUSH CreateHatchBrush(int, COLORREF);
HDC CreateICA(LPCSTR, LPCSTR, LPCSTR, DEVMODEA*);
HDC CreateICW(LPCWSTR, LPCWSTR, LPCWSTR, DEVMODEW*);
HDC CreateMetaFileA(LPCSTR);
HDC CreateMetaFileW(LPCWSTR);
HPALETTE CreatePalette( LOGPALETTE*);
HBRUSH CreatePatternBrush(HBITMAP);
HPEN CreatePen(int, int, COLORREF);
HPEN CreatePenIndirect( LOGPEN*);
HRGN CreatePolygonRgn( POINT*, int, int);
HRGN CreatePolyPolygonRgn( POINT*, INT*, int, int);
HRGN CreateRectRgn(int, int, int, int);
HRGN CreateRectRgnIndirect(LPCRECT);
HRGN CreateRoundRectRgn(int, int, int, int, int, int);
BOOL CreateScalableFontResourceA(DWORD, LPCSTR, LPCSTR, LPCSTR);
BOOL CreateScalableFontResourceW(DWORD, LPCWSTR, LPCWSTR, LPCWSTR);
HBRUSH CreateSolidBrush(COLORREF);
BOOL DeleteColorSpace(HCOLORSPACE);
BOOL DeleteDC(HDC);
BOOL DeleteEnhMetaFile(HENHMETAFILE);
BOOL DeleteMetaFile(HMETAFILE);
BOOL DeleteObject(HGDIOBJ);
int DescribePixelFormat(HDC, int, UINT, LPPIXELFORMATDESCRIPTOR);
DWORD DeviceCapabilitiesA(LPCSTR, LPCSTR, WORD, LPSTR, DEVMODEA*);
DWORD DeviceCapabilitiesW(LPCWSTR, LPCWSTR, WORD, LPWSTR, DEVMODEW*);
BOOL DPtoLP(HDC, LPPOINT, int);
int DrawEscape(HDC, int, int, LPCSTR);
BOOL Ellipse(HDC, int, int, int, int);
int EndDoc(HDC);
int EndPage(HDC);
BOOL EndPath(HDC);
BOOL EnumEnhMetaFile(HDC, HENHMETAFILE, ENHMFENUMPROC, PVOID, LPCRECT);
int EnumFontFamiliesA(HDC, LPCSTR, FONTENUMPROCA, LPARAM);
int EnumFontFamiliesW(HDC, LPCWSTR, FONTENUMPROCW, LPARAM);
int EnumFontFamiliesExA(HDC, PLOGFONTA, FONTENUMPROCA, LPARAM, DWORD);
int EnumFontFamiliesExW(HDC, PLOGFONTW, FONTENUMPROCW, LPARAM, DWORD);
int EnumFontsA(HDC, LPCSTR, FONTENUMPROCA, LPARAM);
int EnumFontsW(HDC, LPCWSTR, FONTENUMPROCW, LPARAM);
int EnumICMProfilesA(HDC, ICMENUMPROCA, LPARAM);
int EnumICMProfilesW(HDC, ICMENUMPROCW, LPARAM);
BOOL EnumMetaFile(HDC, HMETAFILE, MFENUMPROC, LPARAM);
int EnumObjects(HDC, int, GOBJENUMPROC, LPARAM);
BOOL EqualRgn(HRGN, HRGN);
int Escape(HDC, int, int, LPCSTR, PVOID);
int ExcludeClipRect(HDC, int, int, int, int);
int ExcludeUpdateRgn(HDC, HWND);
HPEN ExtCreatePen(DWORD, DWORD, LOGBRUSH*, DWORD, DWORD*);
HRGN ExtCreateRegion( XFORM*, DWORD, RGNDATA*);
int ExtEscape(HDC, int, int, LPCSTR, int, LPSTR);
BOOL ExtFloodFill(HDC, int, int, COLORREF, UINT);
int ExtSelectClipRgn(HDC, HRGN, int);
BOOL ExtTextOutA(HDC, int, int, UINT, LPCRECT, LPCSTR, UINT, INT*);
BOOL ExtTextOutW(HDC, int, int, UINT, LPCRECT, LPCWSTR, UINT, INT*);
BOOL FillPath(HDC);
int FillRect(HDC, LPCRECT, HBRUSH);
int FillRgn(HDC, HRGN, HBRUSH);
BOOL FixBrushOrgEx(HDC, int, int, LPPOINT);
BOOL FlattenPath(HDC);
BOOL FloodFill(HDC, int, int, COLORREF);
BOOL GdiComment(HDC, UINT, BYTE*);
BOOL GdiFlush();
DWORD GdiGetBatchLimit();
DWORD GdiSetBatchLimit(DWORD);
int GetArcDirection(HDC);
BOOL GetAspectRatioFilterEx(HDC, LPSIZE);
LONG GetBitmapBits(HBITMAP, LONG, PVOID);
BOOL GetBitmapDimensionEx(HBITMAP, LPSIZE);
COLORREF GetBkColor(HDC);
int GetBkMode(HDC);
UINT GetBoundsRect(HDC, LPRECT, UINT);
BOOL GetBrushOrgEx(HDC, LPPOINT);
BOOL GetCharABCWidthsA(HDC, UINT, UINT, LPABC);
BOOL GetCharABCWidthsW(HDC, UINT, UINT, LPABC);
BOOL GetCharABCWidthsFloatA(HDC, UINT, UINT, LPABCFLOAT);
BOOL GetCharABCWidthsFloatW(HDC, UINT, UINT, LPABCFLOAT);
DWORD GetCharacterPlacementA(HDC, LPCSTR, int, int, LPGCP_RESULTSA, DWORD);
DWORD GetCharacterPlacementW(HDC, LPCWSTR, int, int, LPGCP_RESULTSW, DWORD);
BOOL GetCharWidth32A(HDC, UINT, UINT, LPINT);
BOOL GetCharWidth32W(HDC, UINT, UINT, LPINT);
BOOL GetCharWidthA(HDC, UINT, UINT, LPINT);
BOOL GetCharWidthW(HDC, UINT, UINT, LPINT);
BOOL GetCharWidthFloatA(HDC, UINT, UINT, PFLOAT);
BOOL GetCharWidthFloatW(HDC, UINT, UINT, PFLOAT);
int GetClipBox(HDC, LPRECT);
int GetClipRgn(HDC, HRGN);
BOOL GetColorAdjustment(HDC, LPCOLORADJUSTMENT);
HANDLE GetColorSpace(HDC);
HGDIOBJ GetCurrentObject(HDC, UINT);
BOOL GetCurrentPositionEx(HDC, LPPOINT);
HCURSOR GetCursor();
BOOL GetDCOrgEx(HDC, LPPOINT);
int GetDeviceCaps(HDC, int);
BOOL GetDeviceGammaRamp(HDC, PVOID);
UINT GetDIBColorTable(HDC, UINT, UINT, RGBQUAD*);
int GetDIBits(HDC, HBITMAP, UINT, UINT, PVOID, LPBITMAPINFO, UINT);
HENHMETAFILE GetEnhMetaFileA(LPCSTR);
HENHMETAFILE GetEnhMetaFileW(LPCWSTR);
UINT GetEnhMetaFileBits(HENHMETAFILE, UINT, LPBYTE);
UINT GetEnhMetaFileDescriptionA(HENHMETAFILE, UINT, LPSTR);
UINT GetEnhMetaFileDescriptionW(HENHMETAFILE, UINT, LPWSTR);
UINT GetEnhMetaFileHeader(HENHMETAFILE, UINT, LPENHMETAHEADER);
UINT GetEnhMetaFilePaletteEntries(HENHMETAFILE, UINT, LPPALETTEENTRY);
UINT GetEnhMetaFilePixelFormat(HENHMETAFILE, DWORD, PIXELFORMATDESCRIPTOR*);
DWORD GetFontData(HDC, DWORD, DWORD, PVOID, DWORD);
DWORD GetFontLanguageInfo(HDC);
DWORD GetGlyphOutlineA(HDC, UINT, UINT, LPGLYPHMETRICS, DWORD, PVOID, MAT2*);
DWORD GetGlyphOutlineW(HDC, UINT, UINT, LPGLYPHMETRICS, DWORD, PVOID, MAT2*);
int GetGraphicsMode(HDC);
BOOL GetICMProfileA(HDC, DWORD, LPSTR);
BOOL GetICMProfileW(HDC, DWORD, LPWSTR);
DWORD GetKerningPairsA(HDC, DWORD, LPKERNINGPAIR);
DWORD GetKerningPairsW(HDC, DWORD, LPKERNINGPAIR);
BOOL GetLogColorSpaceA(HCOLORSPACE, LPLOGCOLORSPACEA, DWORD);
BOOL GetLogColorSpaceW(HCOLORSPACE, LPLOGCOLORSPACEW, DWORD);
int GetMapMode(HDC);
HMETAFILE GetMetaFileA(LPCSTR);
HMETAFILE GetMetaFileW(LPCWSTR);
UINT GetMetaFileBitsEx(HMETAFILE, UINT, PVOID);
int GetMetaRgn(HDC, HRGN);
BOOL GetMiterLimit(HDC, PFLOAT);
COLORREF GetNearestColor(HDC, COLORREF);
UINT GetNearestPaletteIndex(HPALETTE, COLORREF);
int GetObjectA(HGDIOBJ, int, PVOID);
int GetObjectW(HGDIOBJ, int, PVOID);
DWORD GetObjectType(HGDIOBJ);
UINT GetOutlineTextMetricsA(HDC, UINT, LPOUTLINETEXTMETRICA);
UINT GetOutlineTextMetricsW(HDC, UINT, LPOUTLINETEXTMETRICW);
UINT GetPaletteEntries(HPALETTE, UINT, UINT, LPPALETTEENTRY);
int GetPath(HDC, LPPOINT, PBYTE, int);
COLORREF GetPixel(HDC, int, int);
int GetPixelFormat(HDC);
int GetPolyFillMode(HDC);
BOOL GetRasterizerCaps(LPRASTERIZER_STATUS, UINT);
int GetRandomRgn (HDC, HRGN, INT);
DWORD GetRegionData(HRGN, DWORD, LPRGNDATA);
int GetRgnBox(HRGN, LPRECT);
int GetROP2(HDC);
HGDIOBJ GetStockObject(int);
int GetStretchBltMode(HDC);
UINT GetSystemPaletteEntries(HDC, UINT, UINT, LPPALETTEENTRY);
UINT GetSystemPaletteUse(HDC);
UINT GetTextAlign(HDC);
int GetTextCharacterExtra(HDC);
int GetTextCharset(HDC);
int GetTextCharsetInfo(HDC, LPFONTSIGNATURE, DWORD);
COLORREF GetTextColor(HDC);
BOOL GetTextExtentExPointA(HDC, LPCSTR, int, int, LPINT, LPINT, LPSIZE);
BOOL GetTextExtentExPointW( HDC, LPCWSTR, int, int, LPINT, LPINT, LPSIZE );
BOOL GetTextExtentPointA(HDC, LPCSTR, int, LPSIZE);
BOOL GetTextExtentPointW(HDC, LPCWSTR, int, LPSIZE);
BOOL GetTextExtentPoint32A(HDC, LPCSTR, int, LPSIZE);
BOOL GetTextExtentPoint32W( HDC, LPCWSTR, int, LPSIZE);
int GetTextFaceA(HDC, int, LPSTR);
int GetTextFaceW(HDC, int, LPWSTR);
BOOL GetTextMetricsA(HDC, LPTEXTMETRICA);
BOOL GetTextMetricsW(HDC, LPTEXTMETRICW);
BOOL GetViewportExtEx(HDC, LPSIZE);
BOOL GetViewportOrgEx(HDC, LPPOINT);
BOOL GetWindowExtEx(HDC, LPSIZE);
BOOL GetWindowOrgEx(HDC, LPPOINT);
UINT GetWinMetaFileBits(HENHMETAFILE, UINT, LPBYTE, INT, HDC);
BOOL GetWorldTransform(HDC, LPXFORM);
int IntersectClipRect(HDC, int, int, int, int);
BOOL InvertRgn(HDC, HRGN);
BOOL LineDDA(int, int, int, int, LINEDDAPROC, LPARAM);
BOOL LineTo(HDC, int, int);
BOOL LPtoDP(HDC, LPPOINT, int);
BOOL MaskBlt(HDC, int, int, int, int, HDC, int, int, HBITMAP, int, int, DWORD);
BOOL ModifyWorldTransform(HDC, XFORM*, DWORD);
BOOL MoveToEx(HDC, int, int, LPPOINT);
int OffsetClipRgn(HDC, int, int);
int OffsetRgn(HRGN, int, int);
BOOL OffsetViewportOrgEx(HDC, int, int, LPPOINT);
BOOL OffsetWindowOrgEx(HDC, int, int, LPPOINT);
BOOL PaintRgn(HDC, HRGN);
BOOL PatBlt(HDC, int, int, int, int, DWORD);
HRGN PathToRegion(HDC);
BOOL Pie(HDC, int, int, int, int, int, int, int, int);
BOOL PlayEnhMetaFile(HDC, HENHMETAFILE, LPCRECT);
BOOL PlayEnhMetaFileRecord(HDC, LPHANDLETABLE, ENHMETARECORD*, UINT);
BOOL PlayMetaFile(HDC, HMETAFILE);
BOOL PlayMetaFileRecord(HDC, LPHANDLETABLE, LPMETARECORD, UINT);
BOOL PlgBlt(HDC, POINT*, HDC, int, int, int, int, HBITMAP, int, int);
BOOL PolyBezier(HDC, POINT*, DWORD);
BOOL PolyBezierTo(HDC, POINT*, DWORD);
BOOL PolyDraw(HDC, POINT*, BYTE*, int);
BOOL Polygon(HDC, POINT*, int);
BOOL Polyline(HDC, POINT*, int);
BOOL PolylineTo(HDC, POINT*, DWORD);
BOOL PolyPolygon(HDC, POINT*, INT*, int);
BOOL PolyPolyline(HDC, POINT*, DWORD*, DWORD);
BOOL PolyTextOutA(HDC, POLYTEXTA*, int);
BOOL PolyTextOutW(HDC, POLYTEXTW*, int);
BOOL PtInRegion(HRGN, int, int);
BOOL PtVisible(HDC, int, int);
UINT RealizePalette(HDC);
BOOL Rectangle(HDC, int, int, int, int);
BOOL RectInRegion(HRGN, LPCRECT);
BOOL RectVisible(HDC, LPCRECT);
BOOL RemoveFontResourceA(LPCSTR);
BOOL RemoveFontResourceW(LPCWSTR);

HDC ResetDCA(HDC, DEVMODEA*);
HDC ResetDCW(HDC, DEVMODEW*);
BOOL ResizePalette(HPALETTE, UINT);
BOOL RestoreDC(HDC, int);
BOOL RoundRect(HDC, int, int, int, int, int, int);
int SaveDC(HDC);
BOOL ScaleViewportExtEx(HDC, int, int, int, int, LPSIZE);
BOOL ScaleWindowExtEx(HDC, int, int, int, int, LPSIZE);
BOOL SelectClipPath(HDC, int);
int SelectClipRgn(HDC, HRGN);
HGDIOBJ SelectObject(HDC, HGDIOBJ);
HPALETTE SelectPalette(HDC, HPALETTE, BOOL);
int SetAbortProc(HDC, ABORTPROC);
int SetArcDirection(HDC, int);
LONG SetBitmapBits(HBITMAP, DWORD, PCVOID);
BOOL SetBitmapDimensionEx(HBITMAP, int, int, LPSIZE);
COLORREF SetBkColor(HDC, COLORREF);
int SetBkMode(HDC, int);
UINT SetBoundsRect(HDC, LPCRECT, UINT);
BOOL SetBrushOrgEx(HDC, int, int, LPPOINT);
BOOL SetColorAdjustment(HDC, COLORADJUSTMENT*);
BOOL SetColorSpace(HDC, HCOLORSPACE);

BOOL SetDeviceGammaRamp(HDC, PVOID);
UINT SetDIBColorTable(HDC, UINT, UINT, RGBQUAD*);
int SetDIBits(HDC, HBITMAP, UINT, UINT, PCVOID, BITMAPINFO*, UINT);
int SetDIBitsToDevice(HDC, int, int, DWORD, DWORD, int, int, UINT, UINT, PCVOID, BITMAPINFO*, UINT);
HENHMETAFILE SetEnhMetaFileBits(UINT, BYTE*);
int SetGraphicsMode(HDC, int);
int SetICMMode(HDC, int);
BOOL SetICMProfileA(HDC, LPSTR);
BOOL SetICMProfileW(HDC, LPWSTR);
int SetMapMode(HDC, int);
DWORD SetMapperFlags(HDC, DWORD);
HMETAFILE SetMetaFileBitsEx(UINT, BYTE* );
int SetMetaRgn(HDC);
BOOL SetMiterLimit(HDC, FLOAT, PFLOAT);
UINT SetPaletteEntries(HPALETTE, UINT, UINT, PALETTEENTRY*);
COLORREF SetPixel(HDC, int, int, COLORREF);
BOOL SetPixelFormat(HDC, int, PIXELFORMATDESCRIPTOR*);
BOOL SetPixelV(HDC, int, int, COLORREF);
int SetPolyFillMode(HDC, int);
BOOL SetRectRgn(HRGN, int, int, int, int);
int SetROP2(HDC, int);
int SetStretchBltMode(HDC, int);
UINT SetSystemPaletteUse(HDC, UINT);
UINT SetTextAlign(HDC, UINT);
int SetTextCharacterExtra(HDC, int);
COLORREF SetTextColor(HDC, COLORREF);
BOOL SetTextJustification(HDC, int, int);
BOOL SetViewportExtEx(HDC, int, int, LPSIZE);
BOOL SetViewportOrgEx(HDC, int, int, LPPOINT);
BOOL SetWindowExtEx(HDC, int, int, LPSIZE);
BOOL SetWindowOrgEx(HDC, int, int, LPPOINT);
HENHMETAFILE SetWinMetaFileBits(UINT, BYTE*, HDC, METAFILEPICT*);
BOOL SetWorldTransform(HDC, XFORM* );
int StartDocA(HDC, DOCINFOA*);
int StartDocW(HDC, DOCINFOW*);
int StartPage(HDC);
BOOL StretchBlt(HDC, int, int, int, int, HDC, int, int, int, int, DWORD);
int StretchDIBits(HDC, int, int, int, int, int, int, int, int, VOID* , BITMAPINFO* , UINT, DWORD);
BOOL StrokeAndFillPath(HDC);
BOOL StrokePath(HDC);
BOOL SwapBuffers(HDC);
BOOL TextOutA(HDC, int, int, LPCSTR, int);
BOOL TextOutW(HDC, int, int, LPCWSTR, int);
BOOL TranslateCharsetInfo(PDWORD, LPCHARSETINFO, DWORD);
BOOL UnrealizeObject(HGDIOBJ);
BOOL UpdateColors(HDC);
BOOL UpdateICMRegKeyA(DWORD, DWORD, LPSTR, UINT);
BOOL UpdateICMRegKeyW(DWORD, DWORD, LPWSTR, UINT);
BOOL WidenPath(HDC);
BOOL wglCopyContext(HGLRC, HGLRC, UINT);
HGLRC wglCreateContext(HDC);
HGLRC wglCreateLayerContext(HDC, int);
BOOL wglDeleteContext(HGLRC);
BOOL wglDescribeLayerPlane(HDC, int, int, UINT, LPLAYERPLANEDESCRIPTOR);
HGLRC wglGetCurrentContext();
HDC wglGetCurrentDC();
int wglGetLayerPaletteEntries(HDC, int, int, int, COLORREF*);
PROC wglGetProcAddress(LPCSTR);
BOOL wglMakeCurrent(HDC, HGLRC);
BOOL wglRealizeLayerPalette(HDC, int, BOOL);
int wglSetLayerPaletteEntries(HDC, int, int, int, COLORREF*);
BOOL wglShareLists(HGLRC, HGLRC);
BOOL wglSwapLayerBuffers(HDC, UINT);
BOOL wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
BOOL wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);
BOOL wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT);
BOOL wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT);

static if (WINVER >= 0x0500) {
    BOOL AlphaBlend(HDC, int, int, int, int, HDC, int, int, int, int, BLENDFUNCTION);
    BOOL GradientFill(HDC, PTRIVERTEX, ULONG, PVOID, ULONG, ULONG);
    BOOL TransparentBlt(HDC, int, int, int, int, HDC, int, int, int, int, UINT);
}

static if (_WIN32_WINNT >= 0x0500) {
    COLORREF SetDCBrushColor(HDC, COLORREF);
    COLORREF SetDCPenColor(HDC, COLORREF);
    HANDLE AddFontMemResourceEx(PVOID, DWORD, PVOID, DWORD* );
    int AddFontResourceExA(LPCSTR, DWORD, PVOID);
    int AddFontResourceExW(LPCWSTR, DWORD, PVOID);
    BOOL RemoveFontMemResourceEx(HANDLE);
    BOOL RemoveFontResourceExA(LPCSTR, DWORD, PVOID);
    BOOL RemoveFontResourceExW(LPCWSTR, DWORD, PVOID);
    DWORD GetFontUnicodeRanges(HDC, LPGLYPHSET);
    DWORD GetGlyphIndicesA(HDC, LPCSTR, int, LPWORD, DWORD);
    DWORD GetGlyphIndicesW(HDC, LPCWSTR, int, LPWORD, DWORD);
}

} // extern (Windows)

version(Unicode) {
    alias WCHAR BCHAR;
    alias DOCINFOW DOCINFO;
    alias LOGFONTW LOGFONT;

    alias TEXTMETRICW TEXTMETRIC;
    alias ICMENUMPROCW ICMENUMPROC;
    alias FONTENUMPROCW FONTENUMPROC;
    alias DEVMODEW DEVMODE;

    alias EXTLOGFONTW EXTLOGFONT;
    alias GCP_RESULTSW GCP_RESULTS;
    alias OUTLINETEXTMETRICW OUTLINETEXTMETRIC;
    alias POLYTEXTW POLYTEXT;
    alias LOGCOLORSPACEW LOGCOLORSPACE;
    alias NEWTEXTMETRICW NEWTEXTMETRIC;
    alias NEWTEXTMETRICEXW NEWTEXTMETRICEX;
    alias ENUMLOGFONTW ENUMLOGFONT;
    alias ENUMLOGFONTEXW ENUMLOGFONTEX;
    alias DISPLAY_DEVICEW DISPLAY_DEVICE;
    alias AddFontResourceW AddFontResource;

    alias CopyEnhMetaFileW CopyEnhMetaFile;
    alias CopyMetaFileW CopyMetaFile;
    alias CreateDCW CreateDC;
    alias CreateEnhMetaFileW CreateEnhMetaFile;
    alias CreateFontW CreateFont;
    alias CreateFontIndirectW CreateFontIndirect;
    alias CreateICW CreateIC;
    alias CreateMetaFileW CreateMetaFile;
    alias CreateScalableFontResourceW CreateScalableFontResource;
    alias DeviceCapabilitiesW DeviceCapabilities;
    alias EnumFontFamiliesW EnumFontFamilies;
    alias EnumFontFamiliesExW EnumFontFamiliesEx;
    alias EnumFontsW EnumFonts;
    alias EnumICMProfilesW EnumICMProfiles;
    alias ExtTextOutW ExtTextOut;
    alias GetCharABCWidthsFloatW GetCharABCWidthsFloat;
    alias GetCharABCWidthsW GetCharABCWidths;
    alias GetCharacterPlacementW GetCharacterPlacement;
    alias GetCharWidth32W GetCharWidth32;
    alias GetCharWidthFloatW GetCharWidthFloat;
    alias GetCharWidthW GetCharWidth;
    alias GetEnhMetaFileW GetEnhMetaFile;
    alias GetEnhMetaFileDescriptionW GetEnhMetaFileDescription;
    alias GetGlyphOutlineW GetGlyphOutline;
    alias GetICMProfileW GetICMProfile;
    alias GetKerningPairsW GetKerningPairs;
    alias GetLogColorSpaceW GetLogColorSpace;
    alias GetMetaFileW GetMetaFile;
    alias GetObjectW GetObject;
    alias GetOutlineTextMetricsW GetOutlineTextMetrics;
    alias GetTextExtentPointW GetTextExtentPoint;
    alias GetTextExtentExPointW GetTextExtentExPoint;
    alias GetTextExtentPoint32W GetTextExtentPoint32;
    alias GetTextFaceW GetTextFace;
    alias GetTextMetricsW GetTextMetrics;
    alias PolyTextOutW PolyTextOut;
    alias RemoveFontResourceW RemoveFontResource;

    alias ResetDCW ResetDC;
    alias SetICMProfileW SetICMProfile;
    alias StartDocW StartDoc;
    alias TextOutW TextOut;
    alias UpdateICMRegKeyW UpdateICMRegKey;
    alias wglUseFontBitmapsW wglUseFontBitmaps;
    alias wglUseFontOutlinesW wglUseFontOutlines;
    static if (_WIN32_WINNT >= 0x0500) {
        alias ENUMLOGFONTEXDVW ENUMLOGFONTEXDV;
        alias PENUMLOGFONTEXDVW PENUMLOGFONTEXDV;
        alias LPENUMLOGFONTEXDVW LPENUMLOGFONTEXDV;
        alias AddFontResourceExW AddFontResourceEx;
        alias RemoveFontResourceExW RemoveFontResourceEx;
        alias GetGlyphIndicesW GetGlyphIndices;
    }
} else { /* UNICODE */
    alias BYTE BCHAR;
    alias DOCINFOA DOCINFO;
    alias LOGFONTA LOGFONT;
    alias TEXTMETRICA TEXTMETRIC;
    alias ICMENUMPROCA ICMENUMPROC;
    alias FONTENUMPROCA FONTENUMPROC;
    alias DEVMODEA DEVMODE;
    alias EXTLOGFONTA EXTLOGFONT;
    alias GCP_RESULTSA GCP_RESULTS;
    alias OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
    alias POLYTEXTA POLYTEXT;
    alias LOGCOLORSPACEA LOGCOLORSPACE;
    alias NEWTEXTMETRICA NEWTEXTMETRIC;
    alias NEWTEXTMETRICEXA NEWTEXTMETRICEX;
    alias ENUMLOGFONTA ENUMLOGFONT;
    alias ENUMLOGFONTEXA ENUMLOGFONTEX;
    alias DISPLAY_DEVICEA DISPLAY_DEVICE;


    alias AddFontResourceA AddFontResource;
    alias CopyEnhMetaFileA CopyEnhMetaFile;
    alias CopyMetaFileA CopyMetaFile;
    alias CreateDCA CreateDC;
    alias CreateEnhMetaFileA CreateEnhMetaFile;
    alias CreateFontA CreateFont;
    alias CreateFontIndirectA CreateFontIndirect;
    alias CreateICA CreateIC;
    alias CreateMetaFileA CreateMetaFile;
    alias CreateScalableFontResourceA CreateScalableFontResource;
    alias DeviceCapabilitiesA DeviceCapabilities;
    alias EnumFontFamiliesA EnumFontFamilies;
    alias EnumFontFamiliesExA EnumFontFamiliesEx;
    alias EnumFontsA EnumFonts;
    alias EnumICMProfilesA EnumICMProfiles;
    alias ExtTextOutA ExtTextOut;
    alias GetCharWidthFloatA GetCharWidthFloat;
    alias GetCharWidthA GetCharWidth;
    alias GetCharacterPlacementA GetCharacterPlacement;
    alias GetCharABCWidthsA GetCharABCWidths;
    alias GetCharABCWidthsFloatA GetCharABCWidthsFloat;
    alias GetCharWidth32A GetCharWidth32;
    alias GetEnhMetaFileA GetEnhMetaFile;
    alias GetEnhMetaFileDescriptionA GetEnhMetaFileDescription;
    alias GetGlyphOutlineA GetGlyphOutline;
    alias GetICMProfileA GetICMProfile;
    alias GetKerningPairsA GetKerningPairs;
    alias GetLogColorSpaceA GetLogColorSpace;
    alias GetMetaFileA GetMetaFile;
    alias GetObjectA GetObject;
    alias GetOutlineTextMetricsA GetOutlineTextMetrics;
    alias GetTextExtentPointA GetTextExtentPoint;
    alias GetTextExtentExPointA GetTextExtentExPoint;
    alias GetTextExtentPoint32A GetTextExtentPoint32;
    alias GetTextFaceA GetTextFace;
    alias GetTextMetricsA GetTextMetrics;
    alias PolyTextOutA PolyTextOut;
    alias RemoveFontResourceA RemoveFontResource;
    alias ResetDCA ResetDC;
    alias SetICMProfileA SetICMProfile;
    alias StartDocA StartDoc;
    alias TextOutA TextOut;
    alias UpdateICMRegKeyA UpdateICMRegKey;
    alias wglUseFontBitmapsA wglUseFontBitmaps;
    alias wglUseFontOutlinesA wglUseFontOutlines;
    static if (_WIN32_WINNT >= 0x0500) {
        alias ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
        alias PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
        alias LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;
        alias AddFontResourceExA AddFontResourceEx;
        alias RemoveFontResourceExA RemoveFontResourceEx;
        alias GetGlyphIndicesA GetGlyphIndices;
    }
} /* UNICODE */

// Common to both ASCII & UNICODE
alias DOCINFO* LPDOCINFO;
alias LOGFONT* PLOGFONT, LPLOGFONT;
alias TEXTMETRIC* PTEXTMETRIC, LPTEXTMETRIC;
alias DEVMODE* PDEVMODE, LPDEVMODE;
alias EXTLOGFONT* PEXTLOGFONT, LPEXTLOGFONT;
alias GCP_RESULTS* LPGCP_RESULTS;
alias OUTLINETEXTMETRIC* POUTLINETEXTMETRIC, LPOUTLINETEXTMETRIC;
alias POLYTEXT* PPOLYTEXT, LPPOLYTEXT;
alias LOGCOLORSPACE* LPLOGCOLORSPACE;
alias NEWTEXTMETRIC* PNEWTEXTMETRIC, LPNEWTEXTMETRIC;
alias ENUMLOGFONT* LPENUMLOGFONT;
alias ENUMLOGFONTEX* LPENUMLOGFONTEX;
alias DISPLAY_DEVICE* PDISPLAY_DEVICE, LPDISPLAY_DEVICE;
